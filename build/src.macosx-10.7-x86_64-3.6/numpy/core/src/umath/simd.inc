#line 1 "numpy/core/src/umath/simd.inc.src"

/*
 *****************************************************************************
 **       This file was autogenerated from a template  DO NOT EDIT!!!!      **
 **       Changes should be made to the original source (.src) file         **
 *****************************************************************************
 */

#line 1
/* -*- c -*- */

/*
 * This file is for the definitions of simd vectorized operations.
 *
 * Currently contains sse2 functions that are built on amd64, x32 or
 * non-generic builds (CFLAGS=-march=...)
 * In future it may contain other instruction sets like AVX or NEON detected
 * at runtime in which case it needs to be included indirectly via a file
 * compiled with special options (or use gcc target attributes) so the binary
 * stays portable.
 */


#ifndef __NPY_SIMD_INC
#define __NPY_SIMD_INC

#include "lowlevel_strided_loops.h"
#include "numpy/npy_common.h"
#include "numpy/npy_math.h"
#ifdef NPY_HAVE_SSE2_INTRINSICS
#include <emmintrin.h>
#if !defined(_MSC_VER) || _MSC_VER >= 1600
#include <immintrin.h>
#else
#undef __AVX2__
#undef __AVX512F__
#endif
#endif
#include <assert.h>
#include <stdlib.h>
#include <float.h>
#include <string.h> /* for memcpy */

#define VECTOR_SIZE_BYTES 16

static NPY_INLINE npy_uintp
abs_ptrdiff(char *a, char *b)
{
    return (a > b) ? (a - b) : (b - a);
}

/*
 * stride is equal to element size and input and destination are equal or
 * don't overlap within one register. The check of the steps against
 * esize also quarantees that steps are >= 0.
 */
#define IS_BLOCKABLE_UNARY(esize, vsize) \
    (steps[0] == (esize) && steps[0] == steps[1] && \
     (npy_is_aligned(args[0], esize) && npy_is_aligned(args[1], esize)) && \
     ((abs_ptrdiff(args[1], args[0]) >= (vsize)) || \
      ((abs_ptrdiff(args[1], args[0]) == 0))))

/*
 * output should be contiguous, can handle strided input data
 */
#define IS_OUTPUT_BLOCKABLE_UNARY(esize, vsize) \
    (steps[1] == (esize) && \
     (npy_is_aligned(args[0], esize) && npy_is_aligned(args[1], esize)) && \
     ((abs_ptrdiff(args[1], args[0]) >= (vsize)) || \
      ((abs_ptrdiff(args[1], args[0]) == 0))))

#define IS_BLOCKABLE_REDUCE(esize, vsize) \
    (steps[1] == (esize) && abs_ptrdiff(args[1], args[0]) >= (vsize) && \
     npy_is_aligned(args[1], (esize)) && \
     npy_is_aligned(args[0], (esize)))

#define IS_BLOCKABLE_BINARY(esize, vsize) \
    (steps[0] == steps[1] && steps[1] == steps[2] && steps[2] == (esize) && \
     npy_is_aligned(args[2], (esize)) && npy_is_aligned(args[1], (esize)) && \
     npy_is_aligned(args[0], (esize)) && \
     (abs_ptrdiff(args[2], args[0]) >= (vsize) || \
      abs_ptrdiff(args[2], args[0]) == 0) && \
     (abs_ptrdiff(args[2], args[1]) >= (vsize) || \
      abs_ptrdiff(args[2], args[1]) >= 0))

#define IS_BLOCKABLE_BINARY_SCALAR1(esize, vsize) \
    (steps[0] == 0 && steps[1] == steps[2] && steps[2] == (esize) && \
     npy_is_aligned(args[2], (esize)) && npy_is_aligned(args[1], (esize)) && \
     ((abs_ptrdiff(args[2], args[1]) >= (vsize)) || \
      (abs_ptrdiff(args[2], args[1]) == 0)) && \
     abs_ptrdiff(args[2], args[0]) >= (esize))

#define IS_BLOCKABLE_BINARY_SCALAR2(esize, vsize) \
    (steps[1] == 0 && steps[0] == steps[2] && steps[2] == (esize) && \
     npy_is_aligned(args[2], (esize)) && npy_is_aligned(args[0], (esize)) && \
     ((abs_ptrdiff(args[2], args[0]) >= (vsize)) || \
      (abs_ptrdiff(args[2], args[0]) == 0)) && \
     abs_ptrdiff(args[2], args[1]) >= (esize))

#undef abs_ptrdiff

#define IS_BLOCKABLE_BINARY_BOOL(esize, vsize) \
    (steps[0] == (esize) && steps[0] == steps[1] && steps[2] == (1) && \
     npy_is_aligned(args[1], (esize)) && \
     npy_is_aligned(args[0], (esize)))

#define IS_BLOCKABLE_BINARY_SCALAR1_BOOL(esize, vsize) \
    (steps[0] == 0 && steps[1] == (esize) && steps[2] == (1) && \
     npy_is_aligned(args[1], (esize)))

#define IS_BLOCKABLE_BINARY_SCALAR2_BOOL(esize, vsize) \
    (steps[0] == (esize) && steps[1] == 0 && steps[2] == (1) && \
     npy_is_aligned(args[0], (esize)))

/* align var to alignment */
#define LOOP_BLOCK_ALIGN_VAR(var, type, alignment)\
    npy_intp i, peel = npy_aligned_block_offset(var, sizeof(type),\
                                                alignment, n);\
    for(i = 0; i < peel; i++)

#define LOOP_BLOCKED(type, vsize)\
    for(; i < npy_blocked_end(peel, sizeof(type), vsize, n);\
            i += (vsize / sizeof(type)))

#define LOOP_BLOCKED_END\
    for (; i < n; i++)


/*
 * Dispatcher functions
 * decide whether the operation can be vectorized and run it
 * if it was run returns true and false if nothing was done
 */

/*
 *****************************************************************************
 **                           FLOAT DISPATCHERS
 *****************************************************************************
 */

#line 137

/* prototypes */

#line 143

#if defined HAVE_ATTRIBUTE_TARGET_AVX2_WITH_INTRINSICS && defined NPY_HAVE_SSE2_INTRINSICS
static NPY_INLINE void
AVX2_exp_FLOAT(npy_float *, npy_float *, const npy_intp n, const npy_intp stride);
#endif

static NPY_INLINE int
run_unary_avx2_exp_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined HAVE_ATTRIBUTE_TARGET_AVX2_WITH_INTRINSICS && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_OUTPUT_BLOCKABLE_UNARY(sizeof(npy_float), 32)) {
        AVX2_exp_FLOAT((npy_float*)args[1], (npy_float*)args[0], dimensions[0], steps[0]);
        return 1;
    }
    else
        return 0;
#endif
    return 0;
}


#line 143

#if defined HAVE_ATTRIBUTE_TARGET_AVX2_WITH_INTRINSICS && defined NPY_HAVE_SSE2_INTRINSICS
static NPY_INLINE void
AVX2_log_FLOAT(npy_float *, npy_float *, const npy_intp n, const npy_intp stride);
#endif

static NPY_INLINE int
run_unary_avx2_log_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined HAVE_ATTRIBUTE_TARGET_AVX2_WITH_INTRINSICS && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_OUTPUT_BLOCKABLE_UNARY(sizeof(npy_float), 32)) {
        AVX2_log_FLOAT((npy_float*)args[1], (npy_float*)args[0], dimensions[0], steps[0]);
        return 1;
    }
    else
        return 0;
#endif
    return 0;
}




#line 137

/* prototypes */

#line 143

#if defined HAVE_ATTRIBUTE_TARGET_AVX512F_WITH_INTRINSICS && defined NPY_HAVE_SSE2_INTRINSICS
static NPY_INLINE void
AVX512F_exp_FLOAT(npy_float *, npy_float *, const npy_intp n, const npy_intp stride);
#endif

static NPY_INLINE int
run_unary_avx512f_exp_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined HAVE_ATTRIBUTE_TARGET_AVX512F_WITH_INTRINSICS && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_OUTPUT_BLOCKABLE_UNARY(sizeof(npy_float), 64)) {
        AVX512F_exp_FLOAT((npy_float*)args[1], (npy_float*)args[0], dimensions[0], steps[0]);
        return 1;
    }
    else
        return 0;
#endif
    return 0;
}


#line 143

#if defined HAVE_ATTRIBUTE_TARGET_AVX512F_WITH_INTRINSICS && defined NPY_HAVE_SSE2_INTRINSICS
static NPY_INLINE void
AVX512F_log_FLOAT(npy_float *, npy_float *, const npy_intp n, const npy_intp stride);
#endif

static NPY_INLINE int
run_unary_avx512f_log_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined HAVE_ATTRIBUTE_TARGET_AVX512F_WITH_INTRINSICS && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_OUTPUT_BLOCKABLE_UNARY(sizeof(npy_float), 64)) {
        AVX512F_log_FLOAT((npy_float*)args[1], (npy_float*)args[0], dimensions[0], steps[0]);
        return 1;
    }
    else
        return 0;
#endif
    return 0;
}







#line 175

#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_sqrt_FLOAT(npy_float *, npy_float *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_simd_sqrt_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_UNARY(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_sqrt_FLOAT((npy_float*)args[1], (npy_float*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_absolute_FLOAT(npy_float *, npy_float *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_simd_absolute_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_UNARY(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_absolute_FLOAT((npy_float*)args[1], (npy_float*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_negative_FLOAT(npy_float *, npy_float *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_simd_negative_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_UNARY(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_negative_FLOAT((npy_float*)args[1], (npy_float*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_minimum_FLOAT(npy_float *, npy_float *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_reduce_simd_minimum_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_REDUCE(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_minimum_FLOAT((npy_float*)args[1], (npy_float*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_maximum_FLOAT(npy_float *, npy_float *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_reduce_simd_maximum_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_REDUCE(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_maximum_FLOAT((npy_float*)args[1], (npy_float*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}



#line 208

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_add_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_add_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_add_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_add_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_float * op = (npy_float *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_scalar1_add_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_scalar2_add_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_add_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 208

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_subtract_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_subtract_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_subtract_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_subtract_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_float * op = (npy_float *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_scalar1_subtract_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_scalar2_subtract_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_subtract_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 208

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_multiply_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_multiply_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_multiply_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_multiply_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_float * op = (npy_float *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_scalar1_multiply_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_scalar2_multiply_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_multiply_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 208

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_divide_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_divide_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_divide_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_divide_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_float * op = (npy_float *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_scalar1_divide_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_scalar2_divide_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_float), vector_size_bytes)) {
        sse2_binary_divide_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}



#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_equal_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_not_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_not_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_not_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_not_equal_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_not_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_not_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_not_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_less_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_less_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_less_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_less_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_less_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_less_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_less_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_less_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_less_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_less_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_less_equal_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_less_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_less_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_less_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_greater_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_greater_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_greater_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_greater_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_greater_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_greater_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_greater_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_greater_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_greater_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_greater_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_greater_equal_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_greater_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_greater_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_greater_equal_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_logical_and_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_logical_and_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_logical_and_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_logical_and_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_logical_and_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_logical_and_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_logical_and_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_logical_or_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_logical_or_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_logical_or_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_logical_or_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_float * ip1 = (npy_float *)args[0];
    npy_float * ip2 = (npy_float *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_logical_or_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_logical_or_FLOAT(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_float), VECTOR_SIZE_BYTES)) {
        sse2_binary_logical_or_FLOAT(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}



#line 311

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_isnan_FLOAT(npy_bool * op, npy_float * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_isnan_simd_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_float) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_float))) {
        sse2_isnan_FLOAT((npy_bool*)args[1], (npy_float*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 311

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_isfinite_FLOAT(npy_bool * op, npy_float * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_isfinite_simd_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_float) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_float))) {
        sse2_isfinite_FLOAT((npy_bool*)args[1], (npy_float*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 311

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_isinf_FLOAT(npy_bool * op, npy_float * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_isinf_simd_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_float) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_float))) {
        sse2_isinf_FLOAT((npy_bool*)args[1], (npy_float*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 311

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_signbit_FLOAT(npy_bool * op, npy_float * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_signbit_simd_FLOAT(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_float) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_float))) {
        sse2_signbit_FLOAT((npy_bool*)args[1], (npy_float*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}




#line 175

#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_sqrt_DOUBLE(npy_double *, npy_double *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_simd_sqrt_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_UNARY(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_sqrt_DOUBLE((npy_double*)args[1], (npy_double*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_absolute_DOUBLE(npy_double *, npy_double *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_simd_absolute_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_UNARY(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_absolute_DOUBLE((npy_double*)args[1], (npy_double*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_negative_DOUBLE(npy_double *, npy_double *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_simd_negative_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_UNARY(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_negative_DOUBLE((npy_double*)args[1], (npy_double*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_minimum_DOUBLE(npy_double *, npy_double *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_reduce_simd_minimum_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_REDUCE(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_minimum_DOUBLE((npy_double*)args[1], (npy_double*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_maximum_DOUBLE(npy_double *, npy_double *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_reduce_simd_maximum_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_REDUCE(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_maximum_DOUBLE((npy_double*)args[1], (npy_double*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}



#line 208

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_add_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_add_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_add_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_add_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_double * op = (npy_double *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_scalar1_add_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_scalar2_add_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_add_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 208

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_subtract_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_subtract_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_subtract_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_subtract_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_double * op = (npy_double *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_scalar1_subtract_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_scalar2_subtract_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_subtract_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 208

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_multiply_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_multiply_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_multiply_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_multiply_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_double * op = (npy_double *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_scalar1_multiply_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_scalar2_multiply_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_multiply_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 208

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_divide_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_divide_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_divide_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_divide_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_double * op = (npy_double *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_scalar1_divide_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_scalar2_divide_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_double), vector_size_bytes)) {
        sse2_binary_divide_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}



#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_equal_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_not_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_not_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_not_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_not_equal_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_not_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_not_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_not_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_less_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_less_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_less_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_less_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_less_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_less_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_less_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_less_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_less_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_less_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_less_equal_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_less_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_less_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_less_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_greater_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_greater_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_greater_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_greater_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_greater_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_greater_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_greater_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_greater_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_greater_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_greater_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_greater_equal_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_greater_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_greater_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_greater_equal_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_logical_and_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_logical_and_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_logical_and_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_logical_and_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_logical_and_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_logical_and_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_logical_and_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 1 && 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_logical_or_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_logical_or_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_logical_or_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_logical_or_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_double * ip1 = (npy_double *)args[0];
    npy_double * ip2 = (npy_double *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_logical_or_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_logical_or_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_double), VECTOR_SIZE_BYTES)) {
        sse2_binary_logical_or_DOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}



#line 311

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_isnan_DOUBLE(npy_bool * op, npy_double * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_isnan_simd_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_double) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_double))) {
        sse2_isnan_DOUBLE((npy_bool*)args[1], (npy_double*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 311

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_isfinite_DOUBLE(npy_bool * op, npy_double * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_isfinite_simd_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_double) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_double))) {
        sse2_isfinite_DOUBLE((npy_bool*)args[1], (npy_double*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 311

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_isinf_DOUBLE(npy_bool * op, npy_double * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_isinf_simd_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_double) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_double))) {
        sse2_isinf_DOUBLE((npy_bool*)args[1], (npy_double*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 311

#if 1 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_signbit_DOUBLE(npy_bool * op, npy_double * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_signbit_simd_DOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 1 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_double) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_double))) {
        sse2_signbit_DOUBLE((npy_bool*)args[1], (npy_double*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}




#line 175

#line 181

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_sqrt_LONGDOUBLE(npy_longdouble *, npy_longdouble *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_simd_sqrt_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_UNARY(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_sqrt_LONGDOUBLE((npy_longdouble*)args[1], (npy_longdouble*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_absolute_LONGDOUBLE(npy_longdouble *, npy_longdouble *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_simd_absolute_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_UNARY(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_absolute_LONGDOUBLE((npy_longdouble*)args[1], (npy_longdouble*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_negative_LONGDOUBLE(npy_longdouble *, npy_longdouble *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_simd_negative_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_UNARY(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_negative_LONGDOUBLE((npy_longdouble*)args[1], (npy_longdouble*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_minimum_LONGDOUBLE(npy_longdouble *, npy_longdouble *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_reduce_simd_minimum_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_REDUCE(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_minimum_LONGDOUBLE((npy_longdouble*)args[1], (npy_longdouble*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 181

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_maximum_LONGDOUBLE(npy_longdouble *, npy_longdouble *, const npy_intp n);

#endif

static NPY_INLINE int
run_unary_reduce_simd_maximum_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    if (IS_BLOCKABLE_REDUCE(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_maximum_LONGDOUBLE((npy_longdouble*)args[1], (npy_longdouble*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}



#line 208

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_add_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_add_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_add_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_add_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_longdouble * op = (npy_longdouble *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_scalar1_add_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_scalar2_add_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_add_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 208

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_subtract_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_subtract_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_subtract_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_subtract_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_longdouble * op = (npy_longdouble *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_scalar1_subtract_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_scalar2_subtract_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_subtract_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 208

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_multiply_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_multiply_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_multiply_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_multiply_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_longdouble * op = (npy_longdouble *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_scalar1_multiply_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_scalar2_multiply_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_multiply_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 208

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_divide_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_divide_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_divide_LONGDOUBLE(npy_longdouble * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_divide_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_longdouble * op = (npy_longdouble *)args[2];
    npy_intp n = dimensions[0];
#if defined __AVX512F__
    const npy_intp vector_size_bytes = 64;
#elif defined __AVX2__
    const npy_intp vector_size_bytes = 32;
#else
    const npy_intp vector_size_bytes = 32;
#endif
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_scalar1_divide_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_scalar2_divide_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY(sizeof(npy_longdouble), vector_size_bytes)) {
        sse2_binary_divide_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}



#line 264

#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_equal_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_not_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_not_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_not_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_not_equal_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_not_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_not_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_not_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_less_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_less_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_less_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_less_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_less_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_less_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_less_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_less_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_less_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_less_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_less_equal_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_less_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_less_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_less_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_greater_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_greater_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_greater_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_greater_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_greater_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_greater_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_greater_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_greater_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_greater_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_greater_equal_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_greater_equal_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && 1 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_greater_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_greater_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_greater_equal_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 0 && 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_logical_and_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_logical_and_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_logical_and_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_logical_and_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_logical_and_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_logical_and_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_logical_and_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}


#line 264

#if 0 && 0 && defined NPY_HAVE_SSE2_INTRINSICS

/* prototypes */
static void
sse2_binary_logical_or_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                          npy_intp n);
static void
sse2_binary_scalar1_logical_or_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);
static void
sse2_binary_scalar2_logical_or_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_longdouble * ip2,
                                  npy_intp n);

#endif

static NPY_INLINE int
run_binary_simd_logical_or_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && 0 && defined NPY_HAVE_SSE2_INTRINSICS
    npy_longdouble * ip1 = (npy_longdouble *)args[0];
    npy_longdouble * ip2 = (npy_longdouble *)args[1];
    npy_bool * op = (npy_bool *)args[2];
    npy_intp n = dimensions[0];
    /* argument one scalar */
    if (IS_BLOCKABLE_BINARY_SCALAR1_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar1_logical_or_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    /* argument two scalar */
    else if (IS_BLOCKABLE_BINARY_SCALAR2_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_scalar2_logical_or_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
    else if (IS_BLOCKABLE_BINARY_BOOL(sizeof(npy_longdouble), VECTOR_SIZE_BYTES)) {
        sse2_binary_logical_or_LONGDOUBLE(op, ip1, ip2, n);
        return 1;
    }
#endif
    return 0;
}



#line 311

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_isnan_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_isnan_simd_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_longdouble) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_longdouble))) {
        sse2_isnan_LONGDOUBLE((npy_bool*)args[1], (npy_longdouble*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 311

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_isfinite_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_isfinite_simd_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_longdouble) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_longdouble))) {
        sse2_isfinite_LONGDOUBLE((npy_bool*)args[1], (npy_longdouble*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 311

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_isinf_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_isinf_simd_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_longdouble) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_longdouble))) {
        sse2_isinf_LONGDOUBLE((npy_bool*)args[1], (npy_longdouble*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 311

#if 0 && defined NPY_HAVE_SSE2_INTRINSICS

static void
sse2_signbit_LONGDOUBLE(npy_bool * op, npy_longdouble * ip1, npy_intp n);

#endif

static NPY_INLINE int
run_signbit_simd_LONGDOUBLE(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if 0 && defined NPY_HAVE_SSE2_INTRINSICS
    if (steps[0] == sizeof(npy_longdouble) && steps[1] == 1 &&
        npy_is_aligned(args[0], sizeof(npy_longdouble))) {
        sse2_signbit_LONGDOUBLE((npy_bool*)args[1], (npy_longdouble*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}





/*
 *****************************************************************************
 **                           BOOL DISPATCHERS
 *****************************************************************************
 */

#line 345

#if defined NPY_HAVE_SSE2_INTRINSICS
static void
sse2_binary_logical_or_BOOL(npy_bool * op, npy_bool * ip1, npy_bool * ip2,
                        npy_intp n);

static void
sse2_reduce_logical_or_BOOL(npy_bool * op, npy_bool * ip, npy_intp n);
#endif

static NPY_INLINE int
run_binary_simd_logical_or_BOOL(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined NPY_HAVE_SSE2_INTRINSICS
    if (sizeof(npy_bool) == 1 &&
            IS_BLOCKABLE_BINARY(sizeof(npy_bool), VECTOR_SIZE_BYTES)) {
        sse2_binary_logical_or_BOOL((npy_bool*)args[2], (npy_bool*)args[0],
                               (npy_bool*)args[1], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


static NPY_INLINE int
run_reduce_simd_logical_or_BOOL(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined NPY_HAVE_SSE2_INTRINSICS
    if (sizeof(npy_bool) == 1 &&
            IS_BLOCKABLE_REDUCE(sizeof(npy_bool), VECTOR_SIZE_BYTES)) {
        sse2_reduce_logical_or_BOOL((npy_bool*)args[0], (npy_bool*)args[1],
                                dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 345

#if defined NPY_HAVE_SSE2_INTRINSICS
static void
sse2_binary_logical_and_BOOL(npy_bool * op, npy_bool * ip1, npy_bool * ip2,
                        npy_intp n);

static void
sse2_reduce_logical_and_BOOL(npy_bool * op, npy_bool * ip, npy_intp n);
#endif

static NPY_INLINE int
run_binary_simd_logical_and_BOOL(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined NPY_HAVE_SSE2_INTRINSICS
    if (sizeof(npy_bool) == 1 &&
            IS_BLOCKABLE_BINARY(sizeof(npy_bool), VECTOR_SIZE_BYTES)) {
        sse2_binary_logical_and_BOOL((npy_bool*)args[2], (npy_bool*)args[0],
                               (npy_bool*)args[1], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


static NPY_INLINE int
run_reduce_simd_logical_and_BOOL(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined NPY_HAVE_SSE2_INTRINSICS
    if (sizeof(npy_bool) == 1 &&
            IS_BLOCKABLE_REDUCE(sizeof(npy_bool), VECTOR_SIZE_BYTES)) {
        sse2_reduce_logical_and_BOOL((npy_bool*)args[0], (npy_bool*)args[1],
                                dimensions[0]);
        return 1;
    }
#endif
    return 0;
}



#line 389

#if defined NPY_HAVE_SSE2_INTRINSICS
static void
sse2_absolute_BOOL(npy_bool *, npy_bool *, const npy_intp n);
#endif

static NPY_INLINE int
run_unary_simd_absolute_BOOL(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined NPY_HAVE_SSE2_INTRINSICS
    if (sizeof(npy_bool) == 1 &&
            IS_BLOCKABLE_UNARY(sizeof(npy_bool), VECTOR_SIZE_BYTES)) {
        sse2_absolute_BOOL((npy_bool*)args[1], (npy_bool*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}


#line 389

#if defined NPY_HAVE_SSE2_INTRINSICS
static void
sse2_logical_not_BOOL(npy_bool *, npy_bool *, const npy_intp n);
#endif

static NPY_INLINE int
run_unary_simd_logical_not_BOOL(char **args, npy_intp *dimensions, npy_intp *steps)
{
#if defined NPY_HAVE_SSE2_INTRINSICS
    if (sizeof(npy_bool) == 1 &&
            IS_BLOCKABLE_UNARY(sizeof(npy_bool), VECTOR_SIZE_BYTES)) {
        sse2_logical_not_BOOL((npy_bool*)args[1], (npy_bool*)args[0], dimensions[0]);
        return 1;
    }
#endif
    return 0;
}



#ifdef NPY_HAVE_SSE2_INTRINSICS

/*
 * Vectorized operations
 */
/*
 *****************************************************************************
 **                           FLOAT LOOPS
 *****************************************************************************
 */

#line 425

static NPY_INLINE npy_float sse2_horizontal_min___m128(__m128 v)
{
    npy_float r;
    __m128 tmp = _mm_movehl_ps(v, v);                   /* c     d     ... */
    __m128 m = _mm_min_ps(v, tmp);                    /* m(ac) m(bd) ... */
    tmp = _mm_shuffle_ps(m, m, _MM_SHUFFLE(1, 1, 1, 1));/* m(bd) m(bd) ... */
    _mm_store_ss(&r, _mm_min_ps(tmp, m));             /* m(acbd) ... */
    return r;
}

static NPY_INLINE npy_double sse2_horizontal_min___m128d(__m128d v)
{
    npy_double r;
    __m128d tmp = _mm_unpackhi_pd(v, v);    /* b     b */
    _mm_store_sd(&r, _mm_min_pd(tmp, v)); /* m(ab) m(bb) */
    return r;
}


#line 425

static NPY_INLINE npy_float sse2_horizontal_max___m128(__m128 v)
{
    npy_float r;
    __m128 tmp = _mm_movehl_ps(v, v);                   /* c     d     ... */
    __m128 m = _mm_max_ps(v, tmp);                    /* m(ac) m(bd) ... */
    tmp = _mm_shuffle_ps(m, m, _MM_SHUFFLE(1, 1, 1, 1));/* m(bd) m(bd) ... */
    _mm_store_ss(&r, _mm_max_ps(tmp, m));             /* m(acbd) ... */
    return r;
}

static NPY_INLINE npy_double sse2_horizontal_max___m128d(__m128d v)
{
    npy_double r;
    __m128d tmp = _mm_unpackhi_pd(v, v);    /* b     b */
    _mm_store_sd(&r, _mm_max_pd(tmp, v)); /* m(ab) m(bb) */
    return r;
}



#line 463


#line 471

static void
sse2_binary_add_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef  __AVX512F__
    const npy_intp vector_size_bytes = 64;
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] + ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) && npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_load_ps(&ip1[i]);
                __m512 c = _mm512_add_ps(a, a);
                _mm512_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_load_ps(&ip1[i]);
                __m512 b = _mm512_load_ps(&ip2[i]);
                __m512 c = _mm512_add_ps(a, b);
                _mm512_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_load_ps(&ip1[i]);
            __m512 b = _mm512_loadu_ps(&ip2[i]);
            __m512 c = _mm512_add_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_loadu_ps(&ip1[i]);
            __m512 b = _mm512_load_ps(&ip2[i]);
            __m512 c = _mm512_add_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_loadu_ps(&ip1[i]);
                __m512 c = _mm512_add_ps(a, a);
                _mm512_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_loadu_ps(&ip1[i]);
                __m512 b = _mm512_loadu_ps(&ip2[i]);
                __m512 c = _mm512_add_ps(a, b);
                _mm512_store_ps(&op[i], c);
            }
        }
    }
#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] + ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) &&
            npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_load_ps(&ip1[i]);
                __m256 c = _mm256_add_ps(a, a);
                _mm256_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_load_ps(&ip1[i]);
                __m256 b = _mm256_load_ps(&ip2[i]);
                __m256 c = _mm256_add_ps(a, b);
                _mm256_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_load_ps(&ip1[i]);
            __m256 b = _mm256_loadu_ps(&ip2[i]);
            __m256 c = _mm256_add_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_loadu_ps(&ip1[i]);
            __m256 b = _mm256_load_ps(&ip2[i]);
            __m256 c = _mm256_add_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_loadu_ps(&ip1[i]);
                __m256 c = _mm256_add_ps(a, a);
                _mm256_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_loadu_ps(&ip1[i]);
                __m256 b = _mm256_loadu_ps(&ip2[i]);
                __m256 c = _mm256_add_ps(a, b);
                _mm256_store_ps(&op[i], c);
            }
        }
    }
#else
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] + ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES) &&
            npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_load_ps(&ip1[i]);
                __m128 c = _mm_add_ps(a, a);
                _mm_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_load_ps(&ip1[i]);
                __m128 b = _mm_load_ps(&ip2[i]);
                __m128 c = _mm_add_ps(a, b);
                _mm_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip1[i]);
            __m128 b = _mm_loadu_ps(&ip2[i]);
            __m128 c = _mm_add_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip1[i]);
            __m128 b = _mm_load_ps(&ip2[i]);
            __m128 c = _mm_add_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_loadu_ps(&ip1[i]);
                __m128 c = _mm_add_ps(a, a);
                _mm_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_loadu_ps(&ip1[i]);
                __m128 b = _mm_loadu_ps(&ip2[i]);
                __m128 c = _mm_add_ps(a, b);
                _mm_store_ps(&op[i], c);
            }
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] + ip2[i];
    }
}


static void
sse2_binary_scalar1_add_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512 a = _mm512_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[0] + ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 b = _mm512_load_ps(&ip2[i]);
            __m512 c = _mm512_add_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 b = _mm512_loadu_ps(&ip2[i]);
            __m512 c = _mm512_add_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }


#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256 a = _mm256_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[0] + ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 b = _mm256_load_ps(&ip2[i]);
            __m256 c = _mm256_add_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 b = _mm256_loadu_ps(&ip2[i]);
            __m256 c = _mm256_add_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
#else
    const __m128 a = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[0] + ip2[i];
    if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 b = _mm_load_ps(&ip2[i]);
            __m128 c = _mm_add_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 b = _mm_loadu_ps(&ip2[i]);
            __m128 c = _mm_add_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[0] + ip2[i];
    }
}


static void
sse2_binary_scalar2_add_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512 b = _mm512_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] + ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_load_ps(&ip1[i]);
            __m512 c = _mm512_add_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_loadu_ps(&ip1[i]);
            __m512 c = _mm512_add_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }

#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256 b = _mm256_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] + ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_load_ps(&ip1[i]);
            __m256 c = _mm256_add_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_loadu_ps(&ip1[i]);
            __m256 c = _mm256_add_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
#else
    const __m128 b = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] + ip2[0];
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip1[i]);
            __m128 c = _mm_add_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip1[i]);
            __m128 c = _mm_add_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] + ip2[0];
    }
}


#line 471

static void
sse2_binary_subtract_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef  __AVX512F__
    const npy_intp vector_size_bytes = 64;
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] - ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) && npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_load_ps(&ip1[i]);
                __m512 c = _mm512_sub_ps(a, a);
                _mm512_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_load_ps(&ip1[i]);
                __m512 b = _mm512_load_ps(&ip2[i]);
                __m512 c = _mm512_sub_ps(a, b);
                _mm512_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_load_ps(&ip1[i]);
            __m512 b = _mm512_loadu_ps(&ip2[i]);
            __m512 c = _mm512_sub_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_loadu_ps(&ip1[i]);
            __m512 b = _mm512_load_ps(&ip2[i]);
            __m512 c = _mm512_sub_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_loadu_ps(&ip1[i]);
                __m512 c = _mm512_sub_ps(a, a);
                _mm512_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_loadu_ps(&ip1[i]);
                __m512 b = _mm512_loadu_ps(&ip2[i]);
                __m512 c = _mm512_sub_ps(a, b);
                _mm512_store_ps(&op[i], c);
            }
        }
    }
#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] - ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) &&
            npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_load_ps(&ip1[i]);
                __m256 c = _mm256_sub_ps(a, a);
                _mm256_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_load_ps(&ip1[i]);
                __m256 b = _mm256_load_ps(&ip2[i]);
                __m256 c = _mm256_sub_ps(a, b);
                _mm256_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_load_ps(&ip1[i]);
            __m256 b = _mm256_loadu_ps(&ip2[i]);
            __m256 c = _mm256_sub_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_loadu_ps(&ip1[i]);
            __m256 b = _mm256_load_ps(&ip2[i]);
            __m256 c = _mm256_sub_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_loadu_ps(&ip1[i]);
                __m256 c = _mm256_sub_ps(a, a);
                _mm256_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_loadu_ps(&ip1[i]);
                __m256 b = _mm256_loadu_ps(&ip2[i]);
                __m256 c = _mm256_sub_ps(a, b);
                _mm256_store_ps(&op[i], c);
            }
        }
    }
#else
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] - ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES) &&
            npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_load_ps(&ip1[i]);
                __m128 c = _mm_sub_ps(a, a);
                _mm_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_load_ps(&ip1[i]);
                __m128 b = _mm_load_ps(&ip2[i]);
                __m128 c = _mm_sub_ps(a, b);
                _mm_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip1[i]);
            __m128 b = _mm_loadu_ps(&ip2[i]);
            __m128 c = _mm_sub_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip1[i]);
            __m128 b = _mm_load_ps(&ip2[i]);
            __m128 c = _mm_sub_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_loadu_ps(&ip1[i]);
                __m128 c = _mm_sub_ps(a, a);
                _mm_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_loadu_ps(&ip1[i]);
                __m128 b = _mm_loadu_ps(&ip2[i]);
                __m128 c = _mm_sub_ps(a, b);
                _mm_store_ps(&op[i], c);
            }
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] - ip2[i];
    }
}


static void
sse2_binary_scalar1_subtract_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512 a = _mm512_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[0] - ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 b = _mm512_load_ps(&ip2[i]);
            __m512 c = _mm512_sub_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 b = _mm512_loadu_ps(&ip2[i]);
            __m512 c = _mm512_sub_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }


#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256 a = _mm256_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[0] - ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 b = _mm256_load_ps(&ip2[i]);
            __m256 c = _mm256_sub_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 b = _mm256_loadu_ps(&ip2[i]);
            __m256 c = _mm256_sub_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
#else
    const __m128 a = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[0] - ip2[i];
    if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 b = _mm_load_ps(&ip2[i]);
            __m128 c = _mm_sub_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 b = _mm_loadu_ps(&ip2[i]);
            __m128 c = _mm_sub_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[0] - ip2[i];
    }
}


static void
sse2_binary_scalar2_subtract_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512 b = _mm512_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] - ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_load_ps(&ip1[i]);
            __m512 c = _mm512_sub_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_loadu_ps(&ip1[i]);
            __m512 c = _mm512_sub_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }

#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256 b = _mm256_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] - ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_load_ps(&ip1[i]);
            __m256 c = _mm256_sub_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_loadu_ps(&ip1[i]);
            __m256 c = _mm256_sub_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
#else
    const __m128 b = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] - ip2[0];
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip1[i]);
            __m128 c = _mm_sub_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip1[i]);
            __m128 c = _mm_sub_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] - ip2[0];
    }
}


#line 471

static void
sse2_binary_multiply_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef  __AVX512F__
    const npy_intp vector_size_bytes = 64;
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] * ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) && npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_load_ps(&ip1[i]);
                __m512 c = _mm512_mul_ps(a, a);
                _mm512_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_load_ps(&ip1[i]);
                __m512 b = _mm512_load_ps(&ip2[i]);
                __m512 c = _mm512_mul_ps(a, b);
                _mm512_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_load_ps(&ip1[i]);
            __m512 b = _mm512_loadu_ps(&ip2[i]);
            __m512 c = _mm512_mul_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_loadu_ps(&ip1[i]);
            __m512 b = _mm512_load_ps(&ip2[i]);
            __m512 c = _mm512_mul_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_loadu_ps(&ip1[i]);
                __m512 c = _mm512_mul_ps(a, a);
                _mm512_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_loadu_ps(&ip1[i]);
                __m512 b = _mm512_loadu_ps(&ip2[i]);
                __m512 c = _mm512_mul_ps(a, b);
                _mm512_store_ps(&op[i], c);
            }
        }
    }
#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] * ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) &&
            npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_load_ps(&ip1[i]);
                __m256 c = _mm256_mul_ps(a, a);
                _mm256_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_load_ps(&ip1[i]);
                __m256 b = _mm256_load_ps(&ip2[i]);
                __m256 c = _mm256_mul_ps(a, b);
                _mm256_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_load_ps(&ip1[i]);
            __m256 b = _mm256_loadu_ps(&ip2[i]);
            __m256 c = _mm256_mul_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_loadu_ps(&ip1[i]);
            __m256 b = _mm256_load_ps(&ip2[i]);
            __m256 c = _mm256_mul_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_loadu_ps(&ip1[i]);
                __m256 c = _mm256_mul_ps(a, a);
                _mm256_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_loadu_ps(&ip1[i]);
                __m256 b = _mm256_loadu_ps(&ip2[i]);
                __m256 c = _mm256_mul_ps(a, b);
                _mm256_store_ps(&op[i], c);
            }
        }
    }
#else
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] * ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES) &&
            npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_load_ps(&ip1[i]);
                __m128 c = _mm_mul_ps(a, a);
                _mm_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_load_ps(&ip1[i]);
                __m128 b = _mm_load_ps(&ip2[i]);
                __m128 c = _mm_mul_ps(a, b);
                _mm_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip1[i]);
            __m128 b = _mm_loadu_ps(&ip2[i]);
            __m128 c = _mm_mul_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip1[i]);
            __m128 b = _mm_load_ps(&ip2[i]);
            __m128 c = _mm_mul_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_loadu_ps(&ip1[i]);
                __m128 c = _mm_mul_ps(a, a);
                _mm_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_loadu_ps(&ip1[i]);
                __m128 b = _mm_loadu_ps(&ip2[i]);
                __m128 c = _mm_mul_ps(a, b);
                _mm_store_ps(&op[i], c);
            }
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] * ip2[i];
    }
}


static void
sse2_binary_scalar1_multiply_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512 a = _mm512_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[0] * ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 b = _mm512_load_ps(&ip2[i]);
            __m512 c = _mm512_mul_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 b = _mm512_loadu_ps(&ip2[i]);
            __m512 c = _mm512_mul_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }


#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256 a = _mm256_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[0] * ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 b = _mm256_load_ps(&ip2[i]);
            __m256 c = _mm256_mul_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 b = _mm256_loadu_ps(&ip2[i]);
            __m256 c = _mm256_mul_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
#else
    const __m128 a = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[0] * ip2[i];
    if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 b = _mm_load_ps(&ip2[i]);
            __m128 c = _mm_mul_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 b = _mm_loadu_ps(&ip2[i]);
            __m128 c = _mm_mul_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[0] * ip2[i];
    }
}


static void
sse2_binary_scalar2_multiply_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512 b = _mm512_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] * ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_load_ps(&ip1[i]);
            __m512 c = _mm512_mul_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_loadu_ps(&ip1[i]);
            __m512 c = _mm512_mul_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }

#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256 b = _mm256_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] * ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_load_ps(&ip1[i]);
            __m256 c = _mm256_mul_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_loadu_ps(&ip1[i]);
            __m256 c = _mm256_mul_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
#else
    const __m128 b = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] * ip2[0];
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip1[i]);
            __m128 c = _mm_mul_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip1[i]);
            __m128 c = _mm_mul_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] * ip2[0];
    }
}


#line 471

static void
sse2_binary_divide_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef  __AVX512F__
    const npy_intp vector_size_bytes = 64;
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] / ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) && npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_load_ps(&ip1[i]);
                __m512 c = _mm512_div_ps(a, a);
                _mm512_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_load_ps(&ip1[i]);
                __m512 b = _mm512_load_ps(&ip2[i]);
                __m512 c = _mm512_div_ps(a, b);
                _mm512_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_load_ps(&ip1[i]);
            __m512 b = _mm512_loadu_ps(&ip2[i]);
            __m512 c = _mm512_div_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_loadu_ps(&ip1[i]);
            __m512 b = _mm512_load_ps(&ip2[i]);
            __m512 c = _mm512_div_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_loadu_ps(&ip1[i]);
                __m512 c = _mm512_div_ps(a, a);
                _mm512_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m512 a = _mm512_loadu_ps(&ip1[i]);
                __m512 b = _mm512_loadu_ps(&ip2[i]);
                __m512 c = _mm512_div_ps(a, b);
                _mm512_store_ps(&op[i], c);
            }
        }
    }
#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] / ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) &&
            npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_load_ps(&ip1[i]);
                __m256 c = _mm256_div_ps(a, a);
                _mm256_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_load_ps(&ip1[i]);
                __m256 b = _mm256_load_ps(&ip2[i]);
                __m256 c = _mm256_div_ps(a, b);
                _mm256_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_load_ps(&ip1[i]);
            __m256 b = _mm256_loadu_ps(&ip2[i]);
            __m256 c = _mm256_div_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_loadu_ps(&ip1[i]);
            __m256 b = _mm256_load_ps(&ip2[i]);
            __m256 c = _mm256_div_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_loadu_ps(&ip1[i]);
                __m256 c = _mm256_div_ps(a, a);
                _mm256_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, vector_size_bytes) {
                __m256 a = _mm256_loadu_ps(&ip1[i]);
                __m256 b = _mm256_loadu_ps(&ip2[i]);
                __m256 c = _mm256_div_ps(a, b);
                _mm256_store_ps(&op[i], c);
            }
        }
    }
#else
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] / ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES) &&
            npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_load_ps(&ip1[i]);
                __m128 c = _mm_div_ps(a, a);
                _mm_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_load_ps(&ip1[i]);
                __m128 b = _mm_load_ps(&ip2[i]);
                __m128 c = _mm_div_ps(a, b);
                _mm_store_ps(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip1[i]);
            __m128 b = _mm_loadu_ps(&ip2[i]);
            __m128 c = _mm_div_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip1[i]);
            __m128 b = _mm_load_ps(&ip2[i]);
            __m128 c = _mm_div_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_loadu_ps(&ip1[i]);
                __m128 c = _mm_div_ps(a, a);
                _mm_store_ps(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
                __m128 a = _mm_loadu_ps(&ip1[i]);
                __m128 b = _mm_loadu_ps(&ip2[i]);
                __m128 c = _mm_div_ps(a, b);
                _mm_store_ps(&op[i], c);
            }
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] / ip2[i];
    }
}


static void
sse2_binary_scalar1_divide_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512 a = _mm512_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[0] / ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 b = _mm512_load_ps(&ip2[i]);
            __m512 c = _mm512_div_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 b = _mm512_loadu_ps(&ip2[i]);
            __m512 c = _mm512_div_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }


#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256 a = _mm256_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[0] / ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 b = _mm256_load_ps(&ip2[i]);
            __m256 c = _mm256_div_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 b = _mm256_loadu_ps(&ip2[i]);
            __m256 c = _mm256_div_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
#else
    const __m128 a = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[0] / ip2[i];
    if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 b = _mm_load_ps(&ip2[i]);
            __m128 c = _mm_div_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 b = _mm_loadu_ps(&ip2[i]);
            __m128 c = _mm_div_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[0] / ip2[i];
    }
}


static void
sse2_binary_scalar2_divide_FLOAT(npy_float * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512 b = _mm512_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] / ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_load_ps(&ip1[i]);
            __m512 c = _mm512_div_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m512 a = _mm512_loadu_ps(&ip1[i]);
            __m512 c = _mm512_div_ps(a, b);
            _mm512_store_ps(&op[i], c);
        }
    }

#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256 b = _mm256_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, vector_size_bytes)
        op[i] = ip1[i] / ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_load_ps(&ip1[i]);
            __m256 c = _mm256_div_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, vector_size_bytes) {
            __m256 a = _mm256_loadu_ps(&ip1[i]);
            __m256 c = _mm256_div_ps(a, b);
            _mm256_store_ps(&op[i], c);
        }
    }
#else
    const __m128 b = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] / ip2[0];
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip1[i]);
            __m128 c = _mm_div_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip1[i]);
            __m128 c = _mm_div_ps(a, b);
            _mm_store_ps(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] / ip2[0];
    }
}



/*
 * compress 4 vectors to 4/8 bytes in op with filled with 0 or 1
 * the last vector is passed as a pointer as MSVC 2010 is unable to ignore the
 * calling convention leading to C2719 on 32 bit, see #4795
 */
static NPY_INLINE void
sse2_compress4_to_byte_FLOAT(__m128 r1, __m128 r2, __m128 r3, __m128 * r4,
                              npy_bool * op)
{
    const __m128i mask = _mm_set1_epi8(0x1);
    __m128i ir1 = _mm_packs_epi32(_mm_castps_si128(r1), _mm_castps_si128(r2));
    __m128i ir2 = _mm_packs_epi32(_mm_castps_si128(r3), _mm_castps_si128(*r4));
    __m128i rr = _mm_packs_epi16(ir1, ir2);
#if 0
    rr = _mm_packs_epi16(rr, rr);
    rr = _mm_and_si128(rr, mask);
    _mm_storel_epi64((__m128i*)op, rr);
#else
    rr = _mm_and_si128(rr, mask);
    _mm_storeu_si128((__m128i*)op, rr);
#endif
}

static void
sse2_signbit_FLOAT(npy_bool * op, npy_float * ip1, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = npy_signbit(ip1[i]) != 0;
    }
    LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i]);
        int r = _mm_movemask_ps(a);
        if (sizeof(npy_float) == 8) {
            op[i] = r & 1;
            op[i + 1] = (r >> 1);
        }
        else {
            op[i] = r & 1;
            op[i + 1] = (r >> 1) & 1;
            op[i + 2] = (r >> 2) & 1;
            op[i + 3] = (r >> 3);
        }
    }
    LOOP_BLOCKED_END {
        op[i] = npy_signbit(ip1[i]) != 0;
    }
}

#line 836

static void
sse2_isnan_FLOAT(npy_bool * op, npy_float * ip1, npy_intp n)
{
#if 0 != 0 /* isinf/isfinite */
    /* signbit mask 0x7FFFFFFF after andnot */
    const __m128 mask = _mm_set1_ps(-0.f);
    const __m128 ones = _mm_cmpeq_ps(_mm_setzero_ps(),
                                             _mm_setzero_ps());
#if 0
    const __m128 fltmax = _mm_set1_ps(DBL_MAX);
#else
    const __m128 fltmax = _mm_set1_ps(FLT_MAX);
#endif
#endif
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = npy_isnan(ip1[i]) != 0;
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1, r2, r3, r4;
#if 0 != 0 /* isinf/isfinite */
        /* fabs via masking of sign bit */
        r1 = _mm_andnot_ps(mask, a);
        r2 = _mm_andnot_ps(mask, b);
        r3 = _mm_andnot_ps(mask, c);
        r4 = _mm_andnot_ps(mask, d);
#if 0 == 1 /* isfinite */
        /* negative compare against max float, nan is always true */
        r1 = _mm_cmpnle_ps(r1, fltmax);
        r2 = _mm_cmpnle_ps(r2, fltmax);
        r3 = _mm_cmpnle_ps(r3, fltmax);
        r4 = _mm_cmpnle_ps(r4, fltmax);
#else /* isinf */
        r1 = _mm_cmpnlt_ps(fltmax, r1);
        r2 = _mm_cmpnlt_ps(fltmax, r2);
        r3 = _mm_cmpnlt_ps(fltmax, r3);
        r4 = _mm_cmpnlt_ps(fltmax, r4);
#endif
        /* flip results to what we want (andnot as there is no sse not) */
        r1 = _mm_andnot_ps(r1, ones);
        r2 = _mm_andnot_ps(r2, ones);
        r3 = _mm_andnot_ps(r3, ones);
        r4 = _mm_andnot_ps(r4, ones);
#endif
#if 0 == 0 /* isnan */
        r1 = _mm_cmpneq_ps(a, a);
        r2 = _mm_cmpneq_ps(b, b);
        r3 = _mm_cmpneq_ps(c, c);
        r4 = _mm_cmpneq_ps(d, d);
#endif
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = npy_isnan(ip1[i]) != 0;
    }
}


#line 836

static void
sse2_isfinite_FLOAT(npy_bool * op, npy_float * ip1, npy_intp n)
{
#if 1 != 0 /* isinf/isfinite */
    /* signbit mask 0x7FFFFFFF after andnot */
    const __m128 mask = _mm_set1_ps(-0.f);
    const __m128 ones = _mm_cmpeq_ps(_mm_setzero_ps(),
                                             _mm_setzero_ps());
#if 0
    const __m128 fltmax = _mm_set1_ps(DBL_MAX);
#else
    const __m128 fltmax = _mm_set1_ps(FLT_MAX);
#endif
#endif
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = npy_isfinite(ip1[i]) != 0;
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1, r2, r3, r4;
#if 1 != 0 /* isinf/isfinite */
        /* fabs via masking of sign bit */
        r1 = _mm_andnot_ps(mask, a);
        r2 = _mm_andnot_ps(mask, b);
        r3 = _mm_andnot_ps(mask, c);
        r4 = _mm_andnot_ps(mask, d);
#if 1 == 1 /* isfinite */
        /* negative compare against max float, nan is always true */
        r1 = _mm_cmpnle_ps(r1, fltmax);
        r2 = _mm_cmpnle_ps(r2, fltmax);
        r3 = _mm_cmpnle_ps(r3, fltmax);
        r4 = _mm_cmpnle_ps(r4, fltmax);
#else /* isinf */
        r1 = _mm_cmpnlt_ps(fltmax, r1);
        r2 = _mm_cmpnlt_ps(fltmax, r2);
        r3 = _mm_cmpnlt_ps(fltmax, r3);
        r4 = _mm_cmpnlt_ps(fltmax, r4);
#endif
        /* flip results to what we want (andnot as there is no sse not) */
        r1 = _mm_andnot_ps(r1, ones);
        r2 = _mm_andnot_ps(r2, ones);
        r3 = _mm_andnot_ps(r3, ones);
        r4 = _mm_andnot_ps(r4, ones);
#endif
#if 1 == 0 /* isnan */
        r1 = _mm_cmpneq_ps(a, a);
        r2 = _mm_cmpneq_ps(b, b);
        r3 = _mm_cmpneq_ps(c, c);
        r4 = _mm_cmpneq_ps(d, d);
#endif
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = npy_isfinite(ip1[i]) != 0;
    }
}


#line 836

static void
sse2_isinf_FLOAT(npy_bool * op, npy_float * ip1, npy_intp n)
{
#if 2 != 0 /* isinf/isfinite */
    /* signbit mask 0x7FFFFFFF after andnot */
    const __m128 mask = _mm_set1_ps(-0.f);
    const __m128 ones = _mm_cmpeq_ps(_mm_setzero_ps(),
                                             _mm_setzero_ps());
#if 0
    const __m128 fltmax = _mm_set1_ps(DBL_MAX);
#else
    const __m128 fltmax = _mm_set1_ps(FLT_MAX);
#endif
#endif
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = npy_isinf(ip1[i]) != 0;
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1, r2, r3, r4;
#if 2 != 0 /* isinf/isfinite */
        /* fabs via masking of sign bit */
        r1 = _mm_andnot_ps(mask, a);
        r2 = _mm_andnot_ps(mask, b);
        r3 = _mm_andnot_ps(mask, c);
        r4 = _mm_andnot_ps(mask, d);
#if 2 == 1 /* isfinite */
        /* negative compare against max float, nan is always true */
        r1 = _mm_cmpnle_ps(r1, fltmax);
        r2 = _mm_cmpnle_ps(r2, fltmax);
        r3 = _mm_cmpnle_ps(r3, fltmax);
        r4 = _mm_cmpnle_ps(r4, fltmax);
#else /* isinf */
        r1 = _mm_cmpnlt_ps(fltmax, r1);
        r2 = _mm_cmpnlt_ps(fltmax, r2);
        r3 = _mm_cmpnlt_ps(fltmax, r3);
        r4 = _mm_cmpnlt_ps(fltmax, r4);
#endif
        /* flip results to what we want (andnot as there is no sse not) */
        r1 = _mm_andnot_ps(r1, ones);
        r2 = _mm_andnot_ps(r2, ones);
        r3 = _mm_andnot_ps(r3, ones);
        r4 = _mm_andnot_ps(r4, ones);
#endif
#if 2 == 0 /* isnan */
        r1 = _mm_cmpneq_ps(a, a);
        r2 = _mm_cmpneq_ps(b, b);
        r3 = _mm_cmpneq_ps(c, c);
        r4 = _mm_cmpneq_ps(d, d);
#endif
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = npy_isinf(ip1[i]) != 0;
    }
}



#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_equal_FLOAT(const npy_float a, const npy_float b)
{
    __m128 one = _mm_set1_ps(1);
    npy_float tmp;
    __m128 v = _mm_cmpeq_ss(_mm_load_ss(&a),
                                     _mm_load_ss(&b));
    v = _mm_and_ps(v, one);
    _mm_store_ss(&tmp, v);
    return tmp;
}

static void
sse2_binary_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_equal_FLOAT(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a1 = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b1 = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c1 = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d1 = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 a2 = _mm_loadu_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b2 = _mm_loadu_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c2 = _mm_loadu_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d2 = _mm_loadu_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpeq_ps(a1, a2);
        __m128 r2 = _mm_cmpeq_ps(b1, b2);
        __m128 r3 = _mm_cmpeq_ps(c1, c2);
        __m128 r4 = _mm_cmpeq_ps(d1, d2);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_equal_FLOAT(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_equal_FLOAT(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpeq_ps(s, a);
        __m128 r2 = _mm_cmpeq_ps(s, b);
        __m128 r3 = _mm_cmpeq_ps(s, c);
        __m128 r4 = _mm_cmpeq_ps(s, d);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_equal_FLOAT(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_equal_FLOAT(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpeq_ps(a, s);
        __m128 r2 = _mm_cmpeq_ps(b, s);
        __m128 r3 = _mm_cmpeq_ps(c, s);
        __m128 r4 = _mm_cmpeq_ps(d, s);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_equal_FLOAT(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_not_equal_FLOAT(const npy_float a, const npy_float b)
{
    __m128 one = _mm_set1_ps(1);
    npy_float tmp;
    __m128 v = _mm_cmpneq_ss(_mm_load_ss(&a),
                                     _mm_load_ss(&b));
    v = _mm_and_ps(v, one);
    _mm_store_ss(&tmp, v);
    return tmp;
}

static void
sse2_binary_not_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_not_equal_FLOAT(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a1 = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b1 = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c1 = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d1 = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 a2 = _mm_loadu_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b2 = _mm_loadu_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c2 = _mm_loadu_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d2 = _mm_loadu_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpneq_ps(a1, a2);
        __m128 r2 = _mm_cmpneq_ps(b1, b2);
        __m128 r3 = _mm_cmpneq_ps(c1, c2);
        __m128 r4 = _mm_cmpneq_ps(d1, d2);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_not_equal_FLOAT(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_not_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_not_equal_FLOAT(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpneq_ps(s, a);
        __m128 r2 = _mm_cmpneq_ps(s, b);
        __m128 r3 = _mm_cmpneq_ps(s, c);
        __m128 r4 = _mm_cmpneq_ps(s, d);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_not_equal_FLOAT(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_not_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_not_equal_FLOAT(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpneq_ps(a, s);
        __m128 r2 = _mm_cmpneq_ps(b, s);
        __m128 r3 = _mm_cmpneq_ps(c, s);
        __m128 r4 = _mm_cmpneq_ps(d, s);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_not_equal_FLOAT(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_less_FLOAT(const npy_float a, const npy_float b)
{
    __m128 one = _mm_set1_ps(1);
    npy_float tmp;
    __m128 v = _mm_cmplt_ss(_mm_load_ss(&a),
                                     _mm_load_ss(&b));
    v = _mm_and_ps(v, one);
    _mm_store_ss(&tmp, v);
    return tmp;
}

static void
sse2_binary_less_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_FLOAT(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a1 = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b1 = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c1 = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d1 = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 a2 = _mm_loadu_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b2 = _mm_loadu_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c2 = _mm_loadu_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d2 = _mm_loadu_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmplt_ps(a1, a2);
        __m128 r2 = _mm_cmplt_ps(b1, b2);
        __m128 r3 = _mm_cmplt_ps(c1, c2);
        __m128 r4 = _mm_cmplt_ps(d1, d2);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_FLOAT(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_less_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_FLOAT(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmplt_ps(s, a);
        __m128 r2 = _mm_cmplt_ps(s, b);
        __m128 r3 = _mm_cmplt_ps(s, c);
        __m128 r4 = _mm_cmplt_ps(s, d);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_FLOAT(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_less_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_FLOAT(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmplt_ps(a, s);
        __m128 r2 = _mm_cmplt_ps(b, s);
        __m128 r3 = _mm_cmplt_ps(c, s);
        __m128 r4 = _mm_cmplt_ps(d, s);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_FLOAT(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_less_equal_FLOAT(const npy_float a, const npy_float b)
{
    __m128 one = _mm_set1_ps(1);
    npy_float tmp;
    __m128 v = _mm_cmple_ss(_mm_load_ss(&a),
                                     _mm_load_ss(&b));
    v = _mm_and_ps(v, one);
    _mm_store_ss(&tmp, v);
    return tmp;
}

static void
sse2_binary_less_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_equal_FLOAT(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a1 = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b1 = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c1 = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d1 = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 a2 = _mm_loadu_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b2 = _mm_loadu_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c2 = _mm_loadu_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d2 = _mm_loadu_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmple_ps(a1, a2);
        __m128 r2 = _mm_cmple_ps(b1, b2);
        __m128 r3 = _mm_cmple_ps(c1, c2);
        __m128 r4 = _mm_cmple_ps(d1, d2);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_equal_FLOAT(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_less_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_equal_FLOAT(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmple_ps(s, a);
        __m128 r2 = _mm_cmple_ps(s, b);
        __m128 r3 = _mm_cmple_ps(s, c);
        __m128 r4 = _mm_cmple_ps(s, d);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_equal_FLOAT(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_less_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_equal_FLOAT(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmple_ps(a, s);
        __m128 r2 = _mm_cmple_ps(b, s);
        __m128 r3 = _mm_cmple_ps(c, s);
        __m128 r4 = _mm_cmple_ps(d, s);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_equal_FLOAT(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_greater_FLOAT(const npy_float a, const npy_float b)
{
    __m128 one = _mm_set1_ps(1);
    npy_float tmp;
    __m128 v = _mm_cmpgt_ss(_mm_load_ss(&a),
                                     _mm_load_ss(&b));
    v = _mm_and_ps(v, one);
    _mm_store_ss(&tmp, v);
    return tmp;
}

static void
sse2_binary_greater_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_FLOAT(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a1 = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b1 = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c1 = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d1 = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 a2 = _mm_loadu_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b2 = _mm_loadu_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c2 = _mm_loadu_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d2 = _mm_loadu_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpgt_ps(a1, a2);
        __m128 r2 = _mm_cmpgt_ps(b1, b2);
        __m128 r3 = _mm_cmpgt_ps(c1, c2);
        __m128 r4 = _mm_cmpgt_ps(d1, d2);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_FLOAT(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_greater_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_FLOAT(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpgt_ps(s, a);
        __m128 r2 = _mm_cmpgt_ps(s, b);
        __m128 r3 = _mm_cmpgt_ps(s, c);
        __m128 r4 = _mm_cmpgt_ps(s, d);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_FLOAT(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_greater_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_FLOAT(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpgt_ps(a, s);
        __m128 r2 = _mm_cmpgt_ps(b, s);
        __m128 r3 = _mm_cmpgt_ps(c, s);
        __m128 r4 = _mm_cmpgt_ps(d, s);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_FLOAT(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_greater_equal_FLOAT(const npy_float a, const npy_float b)
{
    __m128 one = _mm_set1_ps(1);
    npy_float tmp;
    __m128 v = _mm_cmpge_ss(_mm_load_ss(&a),
                                     _mm_load_ss(&b));
    v = _mm_and_ps(v, one);
    _mm_store_ss(&tmp, v);
    return tmp;
}

static void
sse2_binary_greater_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_equal_FLOAT(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a1 = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b1 = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c1 = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d1 = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 a2 = _mm_loadu_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b2 = _mm_loadu_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c2 = _mm_loadu_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d2 = _mm_loadu_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpge_ps(a1, a2);
        __m128 r2 = _mm_cmpge_ps(b1, b2);
        __m128 r3 = _mm_cmpge_ps(c1, c2);
        __m128 r4 = _mm_cmpge_ps(d1, d2);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_equal_FLOAT(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_greater_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_equal_FLOAT(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpge_ps(s, a);
        __m128 r2 = _mm_cmpge_ps(s, b);
        __m128 r3 = _mm_cmpge_ps(s, c);
        __m128 r4 = _mm_cmpge_ps(s, d);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_equal_FLOAT(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_greater_equal_FLOAT(npy_bool * op, npy_float * ip1, npy_float * ip2, npy_intp n)
{
    __m128 s = _mm_set1_ps(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_equal_FLOAT(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_float, 4 * VECTOR_SIZE_BYTES) {
        __m128 a = _mm_load_ps(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 b = _mm_load_ps(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 c = _mm_load_ps(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 d = _mm_load_ps(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_float)]);
        __m128 r1 = _mm_cmpge_ps(a, s);
        __m128 r2 = _mm_cmpge_ps(b, s);
        __m128 r3 = _mm_cmpge_ps(c, s);
        __m128 r4 = _mm_cmpge_ps(d, s);
        sse2_compress4_to_byte_FLOAT(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_equal_FLOAT(ip1[i], ip2[0]);
    }
}


static void
sse2_sqrt_FLOAT(npy_float * op, npy_float * ip, const npy_intp n)
{
    /* align output to VECTOR_SIZE_BYTES bytes */
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = npy_sqrtf(ip[i]);
    }
    assert(n < (VECTOR_SIZE_BYTES / sizeof(npy_float)) ||
           npy_is_aligned(&op[i], VECTOR_SIZE_BYTES));
    if (npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 d = _mm_load_ps(&ip[i]);
            _mm_store_ps(&op[i], _mm_sqrt_ps(d));
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 d = _mm_loadu_ps(&ip[i]);
            _mm_store_ps(&op[i], _mm_sqrt_ps(d));
        }
    }
    LOOP_BLOCKED_END {
        op[i] = npy_sqrtf(ip[i]);
    }
}


static NPY_INLINE
npy_float scalar_abs_npy_float(npy_float v)
{
    /* add 0 to clear -0.0 */
    return (v > 0 ? v: -v) + 0;
}

static NPY_INLINE
npy_float scalar_neg_npy_float(npy_float v)
{
    return -v;
}

#line 1038
static void
sse2_absolute_FLOAT(npy_float * op, npy_float * ip, const npy_intp n)
{
    /*
     * get 0x7FFFFFFF mask (everything but signbit set)
     * float & ~mask will remove the sign, float ^ mask flips the sign
     * this is equivalent to how the compiler implements fabs on amd64
     */
    const __m128 mask = _mm_set1_ps(-0.f);

    /* align output to VECTOR_SIZE_BYTES bytes */
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = scalar_abs_npy_float(ip[i]);
    }
    assert(n < (VECTOR_SIZE_BYTES / sizeof(npy_float)) ||
           npy_is_aligned(&op[i], VECTOR_SIZE_BYTES));
    if (npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip[i]);
            _mm_store_ps(&op[i], _mm_andnot_ps(mask, a));
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip[i]);
            _mm_store_ps(&op[i], _mm_andnot_ps(mask, a));
        }
    }
    LOOP_BLOCKED_END {
        op[i] = scalar_abs_npy_float(ip[i]);
    }
}

#line 1038
static void
sse2_negative_FLOAT(npy_float * op, npy_float * ip, const npy_intp n)
{
    /*
     * get 0x7FFFFFFF mask (everything but signbit set)
     * float & ~mask will remove the sign, float ^ mask flips the sign
     * this is equivalent to how the compiler implements fabs on amd64
     */
    const __m128 mask = _mm_set1_ps(-0.f);

    /* align output to VECTOR_SIZE_BYTES bytes */
    LOOP_BLOCK_ALIGN_VAR(op, npy_float, VECTOR_SIZE_BYTES) {
        op[i] = scalar_neg_npy_float(ip[i]);
    }
    assert(n < (VECTOR_SIZE_BYTES / sizeof(npy_float)) ||
           npy_is_aligned(&op[i], VECTOR_SIZE_BYTES));
    if (npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_load_ps(&ip[i]);
            _mm_store_ps(&op[i], _mm_xor_ps(mask, a));
        }
    }
    else {
        LOOP_BLOCKED(npy_float, VECTOR_SIZE_BYTES) {
            __m128 a = _mm_loadu_ps(&ip[i]);
            _mm_store_ps(&op[i], _mm_xor_ps(mask, a));
        }
    }
    LOOP_BLOCKED_END {
        op[i] = scalar_neg_npy_float(ip[i]);
    }
}



#line 1078
/* arguments swapped as unary reduce has the swapped compared to unary */
static void
sse2_maximum_FLOAT(npy_float * ip, npy_float * op, const npy_intp n)
{
    const npy_intp stride = VECTOR_SIZE_BYTES / (npy_intp)sizeof(npy_float);
    LOOP_BLOCK_ALIGN_VAR(ip, npy_float, VECTOR_SIZE_BYTES) {
        /* Order of operations important for MSVC 2015 */
        *op = (*op >= ip[i] || npy_isnan(*op)) ? *op : ip[i];
    }
    assert(n < (stride) || npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES));
    if (i + 3 * stride <= n) {
        /* load the first elements */
        __m128 c1 = _mm_load_ps((npy_float*)&ip[i]);
        __m128 c2 = _mm_load_ps((npy_float*)&ip[i + stride]);
        i += 2 * stride;

        /* minps/minpd will set invalid flag if nan is encountered */
        npy_clear_floatstatus_barrier((char*)&c1);
        LOOP_BLOCKED(npy_float, 2 * VECTOR_SIZE_BYTES) {
            __m128 v1 = _mm_load_ps((npy_float*)&ip[i]);
            __m128 v2 = _mm_load_ps((npy_float*)&ip[i + stride]);
            c1 = _mm_max_ps(c1, v1);
            c2 = _mm_max_ps(c2, v2);
        }
        c1 = _mm_max_ps(c1, c2);

        if (npy_get_floatstatus_barrier((char*)&c1) & NPY_FPE_INVALID) {
            *op = NPY_NANF;
        }
        else {
            npy_float tmp = sse2_horizontal_max___m128(c1);
            /* Order of operations important for MSVC 2015 */
            *op  = (*op >= tmp || npy_isnan(*op)) ? *op : tmp;
        }
    }
    LOOP_BLOCKED_END {
        /* Order of operations important for MSVC 2015 */
        *op  = (*op >= ip[i] || npy_isnan(*op)) ? *op : ip[i];
    }
    npy_clear_floatstatus_barrier((char*)op);
}

#line 1078
/* arguments swapped as unary reduce has the swapped compared to unary */
static void
sse2_minimum_FLOAT(npy_float * ip, npy_float * op, const npy_intp n)
{
    const npy_intp stride = VECTOR_SIZE_BYTES / (npy_intp)sizeof(npy_float);
    LOOP_BLOCK_ALIGN_VAR(ip, npy_float, VECTOR_SIZE_BYTES) {
        /* Order of operations important for MSVC 2015 */
        *op = (*op <= ip[i] || npy_isnan(*op)) ? *op : ip[i];
    }
    assert(n < (stride) || npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES));
    if (i + 3 * stride <= n) {
        /* load the first elements */
        __m128 c1 = _mm_load_ps((npy_float*)&ip[i]);
        __m128 c2 = _mm_load_ps((npy_float*)&ip[i + stride]);
        i += 2 * stride;

        /* minps/minpd will set invalid flag if nan is encountered */
        npy_clear_floatstatus_barrier((char*)&c1);
        LOOP_BLOCKED(npy_float, 2 * VECTOR_SIZE_BYTES) {
            __m128 v1 = _mm_load_ps((npy_float*)&ip[i]);
            __m128 v2 = _mm_load_ps((npy_float*)&ip[i + stride]);
            c1 = _mm_min_ps(c1, v1);
            c2 = _mm_min_ps(c2, v2);
        }
        c1 = _mm_min_ps(c1, c2);

        if (npy_get_floatstatus_barrier((char*)&c1) & NPY_FPE_INVALID) {
            *op = NPY_NANF;
        }
        else {
            npy_float tmp = sse2_horizontal_min___m128(c1);
            /* Order of operations important for MSVC 2015 */
            *op  = (*op <= tmp || npy_isnan(*op)) ? *op : tmp;
        }
    }
    LOOP_BLOCKED_END {
        /* Order of operations important for MSVC 2015 */
        *op  = (*op <= ip[i] || npy_isnan(*op)) ? *op : ip[i];
    }
    npy_clear_floatstatus_barrier((char*)op);
}



#line 463


#line 471

static void
sse2_binary_add_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef  __AVX512F__
    const npy_intp vector_size_bytes = 64;
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] + ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) && npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_load_pd(&ip1[i]);
                __m512d c = _mm512_add_pd(a, a);
                _mm512_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_load_pd(&ip1[i]);
                __m512d b = _mm512_load_pd(&ip2[i]);
                __m512d c = _mm512_add_pd(a, b);
                _mm512_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_load_pd(&ip1[i]);
            __m512d b = _mm512_loadu_pd(&ip2[i]);
            __m512d c = _mm512_add_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_loadu_pd(&ip1[i]);
            __m512d b = _mm512_load_pd(&ip2[i]);
            __m512d c = _mm512_add_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_loadu_pd(&ip1[i]);
                __m512d c = _mm512_add_pd(a, a);
                _mm512_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_loadu_pd(&ip1[i]);
                __m512d b = _mm512_loadu_pd(&ip2[i]);
                __m512d c = _mm512_add_pd(a, b);
                _mm512_store_pd(&op[i], c);
            }
        }
    }
#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] + ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) &&
            npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_load_pd(&ip1[i]);
                __m256d c = _mm256_add_pd(a, a);
                _mm256_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_load_pd(&ip1[i]);
                __m256d b = _mm256_load_pd(&ip2[i]);
                __m256d c = _mm256_add_pd(a, b);
                _mm256_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_load_pd(&ip1[i]);
            __m256d b = _mm256_loadu_pd(&ip2[i]);
            __m256d c = _mm256_add_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_loadu_pd(&ip1[i]);
            __m256d b = _mm256_load_pd(&ip2[i]);
            __m256d c = _mm256_add_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_loadu_pd(&ip1[i]);
                __m256d c = _mm256_add_pd(a, a);
                _mm256_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_loadu_pd(&ip1[i]);
                __m256d b = _mm256_loadu_pd(&ip2[i]);
                __m256d c = _mm256_add_pd(a, b);
                _mm256_store_pd(&op[i], c);
            }
        }
    }
#else
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] + ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES) &&
            npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_load_pd(&ip1[i]);
                __m128d c = _mm_add_pd(a, a);
                _mm_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_load_pd(&ip1[i]);
                __m128d b = _mm_load_pd(&ip2[i]);
                __m128d c = _mm_add_pd(a, b);
                _mm_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip1[i]);
            __m128d b = _mm_loadu_pd(&ip2[i]);
            __m128d c = _mm_add_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip1[i]);
            __m128d b = _mm_load_pd(&ip2[i]);
            __m128d c = _mm_add_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_loadu_pd(&ip1[i]);
                __m128d c = _mm_add_pd(a, a);
                _mm_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_loadu_pd(&ip1[i]);
                __m128d b = _mm_loadu_pd(&ip2[i]);
                __m128d c = _mm_add_pd(a, b);
                _mm_store_pd(&op[i], c);
            }
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] + ip2[i];
    }
}


static void
sse2_binary_scalar1_add_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512d a = _mm512_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[0] + ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d b = _mm512_load_pd(&ip2[i]);
            __m512d c = _mm512_add_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d b = _mm512_loadu_pd(&ip2[i]);
            __m512d c = _mm512_add_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }


#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256d a = _mm256_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[0] + ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d b = _mm256_load_pd(&ip2[i]);
            __m256d c = _mm256_add_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d b = _mm256_loadu_pd(&ip2[i]);
            __m256d c = _mm256_add_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
#else
    const __m128d a = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[0] + ip2[i];
    if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d b = _mm_load_pd(&ip2[i]);
            __m128d c = _mm_add_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d b = _mm_loadu_pd(&ip2[i]);
            __m128d c = _mm_add_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[0] + ip2[i];
    }
}


static void
sse2_binary_scalar2_add_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512d b = _mm512_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] + ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_load_pd(&ip1[i]);
            __m512d c = _mm512_add_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_loadu_pd(&ip1[i]);
            __m512d c = _mm512_add_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }

#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256d b = _mm256_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] + ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_load_pd(&ip1[i]);
            __m256d c = _mm256_add_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_loadu_pd(&ip1[i]);
            __m256d c = _mm256_add_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
#else
    const __m128d b = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] + ip2[0];
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip1[i]);
            __m128d c = _mm_add_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip1[i]);
            __m128d c = _mm_add_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] + ip2[0];
    }
}


#line 471

static void
sse2_binary_subtract_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef  __AVX512F__
    const npy_intp vector_size_bytes = 64;
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] - ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) && npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_load_pd(&ip1[i]);
                __m512d c = _mm512_sub_pd(a, a);
                _mm512_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_load_pd(&ip1[i]);
                __m512d b = _mm512_load_pd(&ip2[i]);
                __m512d c = _mm512_sub_pd(a, b);
                _mm512_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_load_pd(&ip1[i]);
            __m512d b = _mm512_loadu_pd(&ip2[i]);
            __m512d c = _mm512_sub_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_loadu_pd(&ip1[i]);
            __m512d b = _mm512_load_pd(&ip2[i]);
            __m512d c = _mm512_sub_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_loadu_pd(&ip1[i]);
                __m512d c = _mm512_sub_pd(a, a);
                _mm512_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_loadu_pd(&ip1[i]);
                __m512d b = _mm512_loadu_pd(&ip2[i]);
                __m512d c = _mm512_sub_pd(a, b);
                _mm512_store_pd(&op[i], c);
            }
        }
    }
#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] - ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) &&
            npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_load_pd(&ip1[i]);
                __m256d c = _mm256_sub_pd(a, a);
                _mm256_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_load_pd(&ip1[i]);
                __m256d b = _mm256_load_pd(&ip2[i]);
                __m256d c = _mm256_sub_pd(a, b);
                _mm256_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_load_pd(&ip1[i]);
            __m256d b = _mm256_loadu_pd(&ip2[i]);
            __m256d c = _mm256_sub_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_loadu_pd(&ip1[i]);
            __m256d b = _mm256_load_pd(&ip2[i]);
            __m256d c = _mm256_sub_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_loadu_pd(&ip1[i]);
                __m256d c = _mm256_sub_pd(a, a);
                _mm256_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_loadu_pd(&ip1[i]);
                __m256d b = _mm256_loadu_pd(&ip2[i]);
                __m256d c = _mm256_sub_pd(a, b);
                _mm256_store_pd(&op[i], c);
            }
        }
    }
#else
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] - ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES) &&
            npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_load_pd(&ip1[i]);
                __m128d c = _mm_sub_pd(a, a);
                _mm_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_load_pd(&ip1[i]);
                __m128d b = _mm_load_pd(&ip2[i]);
                __m128d c = _mm_sub_pd(a, b);
                _mm_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip1[i]);
            __m128d b = _mm_loadu_pd(&ip2[i]);
            __m128d c = _mm_sub_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip1[i]);
            __m128d b = _mm_load_pd(&ip2[i]);
            __m128d c = _mm_sub_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_loadu_pd(&ip1[i]);
                __m128d c = _mm_sub_pd(a, a);
                _mm_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_loadu_pd(&ip1[i]);
                __m128d b = _mm_loadu_pd(&ip2[i]);
                __m128d c = _mm_sub_pd(a, b);
                _mm_store_pd(&op[i], c);
            }
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] - ip2[i];
    }
}


static void
sse2_binary_scalar1_subtract_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512d a = _mm512_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[0] - ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d b = _mm512_load_pd(&ip2[i]);
            __m512d c = _mm512_sub_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d b = _mm512_loadu_pd(&ip2[i]);
            __m512d c = _mm512_sub_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }


#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256d a = _mm256_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[0] - ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d b = _mm256_load_pd(&ip2[i]);
            __m256d c = _mm256_sub_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d b = _mm256_loadu_pd(&ip2[i]);
            __m256d c = _mm256_sub_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
#else
    const __m128d a = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[0] - ip2[i];
    if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d b = _mm_load_pd(&ip2[i]);
            __m128d c = _mm_sub_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d b = _mm_loadu_pd(&ip2[i]);
            __m128d c = _mm_sub_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[0] - ip2[i];
    }
}


static void
sse2_binary_scalar2_subtract_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512d b = _mm512_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] - ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_load_pd(&ip1[i]);
            __m512d c = _mm512_sub_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_loadu_pd(&ip1[i]);
            __m512d c = _mm512_sub_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }

#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256d b = _mm256_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] - ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_load_pd(&ip1[i]);
            __m256d c = _mm256_sub_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_loadu_pd(&ip1[i]);
            __m256d c = _mm256_sub_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
#else
    const __m128d b = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] - ip2[0];
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip1[i]);
            __m128d c = _mm_sub_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip1[i]);
            __m128d c = _mm_sub_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] - ip2[0];
    }
}


#line 471

static void
sse2_binary_multiply_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef  __AVX512F__
    const npy_intp vector_size_bytes = 64;
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] * ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) && npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_load_pd(&ip1[i]);
                __m512d c = _mm512_mul_pd(a, a);
                _mm512_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_load_pd(&ip1[i]);
                __m512d b = _mm512_load_pd(&ip2[i]);
                __m512d c = _mm512_mul_pd(a, b);
                _mm512_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_load_pd(&ip1[i]);
            __m512d b = _mm512_loadu_pd(&ip2[i]);
            __m512d c = _mm512_mul_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_loadu_pd(&ip1[i]);
            __m512d b = _mm512_load_pd(&ip2[i]);
            __m512d c = _mm512_mul_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_loadu_pd(&ip1[i]);
                __m512d c = _mm512_mul_pd(a, a);
                _mm512_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_loadu_pd(&ip1[i]);
                __m512d b = _mm512_loadu_pd(&ip2[i]);
                __m512d c = _mm512_mul_pd(a, b);
                _mm512_store_pd(&op[i], c);
            }
        }
    }
#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] * ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) &&
            npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_load_pd(&ip1[i]);
                __m256d c = _mm256_mul_pd(a, a);
                _mm256_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_load_pd(&ip1[i]);
                __m256d b = _mm256_load_pd(&ip2[i]);
                __m256d c = _mm256_mul_pd(a, b);
                _mm256_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_load_pd(&ip1[i]);
            __m256d b = _mm256_loadu_pd(&ip2[i]);
            __m256d c = _mm256_mul_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_loadu_pd(&ip1[i]);
            __m256d b = _mm256_load_pd(&ip2[i]);
            __m256d c = _mm256_mul_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_loadu_pd(&ip1[i]);
                __m256d c = _mm256_mul_pd(a, a);
                _mm256_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_loadu_pd(&ip1[i]);
                __m256d b = _mm256_loadu_pd(&ip2[i]);
                __m256d c = _mm256_mul_pd(a, b);
                _mm256_store_pd(&op[i], c);
            }
        }
    }
#else
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] * ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES) &&
            npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_load_pd(&ip1[i]);
                __m128d c = _mm_mul_pd(a, a);
                _mm_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_load_pd(&ip1[i]);
                __m128d b = _mm_load_pd(&ip2[i]);
                __m128d c = _mm_mul_pd(a, b);
                _mm_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip1[i]);
            __m128d b = _mm_loadu_pd(&ip2[i]);
            __m128d c = _mm_mul_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip1[i]);
            __m128d b = _mm_load_pd(&ip2[i]);
            __m128d c = _mm_mul_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_loadu_pd(&ip1[i]);
                __m128d c = _mm_mul_pd(a, a);
                _mm_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_loadu_pd(&ip1[i]);
                __m128d b = _mm_loadu_pd(&ip2[i]);
                __m128d c = _mm_mul_pd(a, b);
                _mm_store_pd(&op[i], c);
            }
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] * ip2[i];
    }
}


static void
sse2_binary_scalar1_multiply_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512d a = _mm512_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[0] * ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d b = _mm512_load_pd(&ip2[i]);
            __m512d c = _mm512_mul_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d b = _mm512_loadu_pd(&ip2[i]);
            __m512d c = _mm512_mul_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }


#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256d a = _mm256_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[0] * ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d b = _mm256_load_pd(&ip2[i]);
            __m256d c = _mm256_mul_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d b = _mm256_loadu_pd(&ip2[i]);
            __m256d c = _mm256_mul_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
#else
    const __m128d a = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[0] * ip2[i];
    if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d b = _mm_load_pd(&ip2[i]);
            __m128d c = _mm_mul_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d b = _mm_loadu_pd(&ip2[i]);
            __m128d c = _mm_mul_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[0] * ip2[i];
    }
}


static void
sse2_binary_scalar2_multiply_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512d b = _mm512_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] * ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_load_pd(&ip1[i]);
            __m512d c = _mm512_mul_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_loadu_pd(&ip1[i]);
            __m512d c = _mm512_mul_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }

#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256d b = _mm256_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] * ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_load_pd(&ip1[i]);
            __m256d c = _mm256_mul_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_loadu_pd(&ip1[i]);
            __m256d c = _mm256_mul_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
#else
    const __m128d b = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] * ip2[0];
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip1[i]);
            __m128d c = _mm_mul_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip1[i]);
            __m128d c = _mm_mul_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] * ip2[0];
    }
}


#line 471

static void
sse2_binary_divide_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef  __AVX512F__
    const npy_intp vector_size_bytes = 64;
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] / ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) && npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_load_pd(&ip1[i]);
                __m512d c = _mm512_div_pd(a, a);
                _mm512_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_load_pd(&ip1[i]);
                __m512d b = _mm512_load_pd(&ip2[i]);
                __m512d c = _mm512_div_pd(a, b);
                _mm512_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_load_pd(&ip1[i]);
            __m512d b = _mm512_loadu_pd(&ip2[i]);
            __m512d c = _mm512_div_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_loadu_pd(&ip1[i]);
            __m512d b = _mm512_load_pd(&ip2[i]);
            __m512d c = _mm512_div_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_loadu_pd(&ip1[i]);
                __m512d c = _mm512_div_pd(a, a);
                _mm512_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m512d a = _mm512_loadu_pd(&ip1[i]);
                __m512d b = _mm512_loadu_pd(&ip2[i]);
                __m512d c = _mm512_div_pd(a, b);
                _mm512_store_pd(&op[i], c);
            }
        }
    }
#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] / ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], vector_size_bytes) &&
            npy_is_aligned(&ip2[i], vector_size_bytes)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_load_pd(&ip1[i]);
                __m256d c = _mm256_div_pd(a, a);
                _mm256_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_load_pd(&ip1[i]);
                __m256d b = _mm256_load_pd(&ip2[i]);
                __m256d c = _mm256_div_pd(a, b);
                _mm256_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_load_pd(&ip1[i]);
            __m256d b = _mm256_loadu_pd(&ip2[i]);
            __m256d c = _mm256_div_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_loadu_pd(&ip1[i]);
            __m256d b = _mm256_load_pd(&ip2[i]);
            __m256d c = _mm256_div_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_loadu_pd(&ip1[i]);
                __m256d c = _mm256_div_pd(a, a);
                _mm256_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, vector_size_bytes) {
                __m256d a = _mm256_loadu_pd(&ip1[i]);
                __m256d b = _mm256_loadu_pd(&ip2[i]);
                __m256d c = _mm256_div_pd(a, b);
                _mm256_store_pd(&op[i], c);
            }
        }
    }
#else
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] / ip2[i];
    /* lots of specializations, to squeeze out max performance */
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES) &&
            npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_load_pd(&ip1[i]);
                __m128d c = _mm_div_pd(a, a);
                _mm_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_load_pd(&ip1[i]);
                __m128d b = _mm_load_pd(&ip2[i]);
                __m128d c = _mm_div_pd(a, b);
                _mm_store_pd(&op[i], c);
            }
        }
    }
    else if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip1[i]);
            __m128d b = _mm_loadu_pd(&ip2[i]);
            __m128d c = _mm_div_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip1[i]);
            __m128d b = _mm_load_pd(&ip2[i]);
            __m128d c = _mm_div_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        if (ip1 == ip2) {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_loadu_pd(&ip1[i]);
                __m128d c = _mm_div_pd(a, a);
                _mm_store_pd(&op[i], c);
            }
        }
        else {
            LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
                __m128d a = _mm_loadu_pd(&ip1[i]);
                __m128d b = _mm_loadu_pd(&ip2[i]);
                __m128d c = _mm_div_pd(a, b);
                _mm_store_pd(&op[i], c);
            }
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] / ip2[i];
    }
}


static void
sse2_binary_scalar1_divide_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512d a = _mm512_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[0] / ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d b = _mm512_load_pd(&ip2[i]);
            __m512d c = _mm512_div_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d b = _mm512_loadu_pd(&ip2[i]);
            __m512d c = _mm512_div_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }


#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256d a = _mm256_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[0] / ip2[i];
    if (npy_is_aligned(&ip2[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d b = _mm256_load_pd(&ip2[i]);
            __m256d c = _mm256_div_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d b = _mm256_loadu_pd(&ip2[i]);
            __m256d c = _mm256_div_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
#else
    const __m128d a = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[0] / ip2[i];
    if (npy_is_aligned(&ip2[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d b = _mm_load_pd(&ip2[i]);
            __m128d c = _mm_div_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d b = _mm_loadu_pd(&ip2[i]);
            __m128d c = _mm_div_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[0] / ip2[i];
    }
}


static void
sse2_binary_scalar2_divide_DOUBLE(npy_double * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
#ifdef __AVX512F__
    const npy_intp vector_size_bytes = 64;
    const __m512d b = _mm512_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] / ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_load_pd(&ip1[i]);
            __m512d c = _mm512_div_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m512d a = _mm512_loadu_pd(&ip1[i]);
            __m512d c = _mm512_div_pd(a, b);
            _mm512_store_pd(&op[i], c);
        }
    }

#elif __AVX2__
    const npy_intp vector_size_bytes = 32;
    const __m256d b = _mm256_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, vector_size_bytes)
        op[i] = ip1[i] / ip2[0];
    if (npy_is_aligned(&ip1[i], vector_size_bytes)) {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_load_pd(&ip1[i]);
            __m256d c = _mm256_div_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, vector_size_bytes) {
            __m256d a = _mm256_loadu_pd(&ip1[i]);
            __m256d c = _mm256_div_pd(a, b);
            _mm256_store_pd(&op[i], c);
        }
    }
#else
    const __m128d b = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] / ip2[0];
    if (npy_is_aligned(&ip1[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip1[i]);
            __m128d c = _mm_div_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip1[i]);
            __m128d c = _mm_div_pd(a, b);
            _mm_store_pd(&op[i], c);
        }
    }
#endif
    LOOP_BLOCKED_END {
        op[i] = ip1[i] / ip2[0];
    }
}



/*
 * compress 4 vectors to 4/8 bytes in op with filled with 0 or 1
 * the last vector is passed as a pointer as MSVC 2010 is unable to ignore the
 * calling convention leading to C2719 on 32 bit, see #4795
 */
static NPY_INLINE void
sse2_compress4_to_byte_DOUBLE(__m128d r1, __m128d r2, __m128d r3, __m128d * r4,
                              npy_bool * op)
{
    const __m128i mask = _mm_set1_epi8(0x1);
    __m128i ir1 = _mm_packs_epi32(_mm_castpd_si128(r1), _mm_castpd_si128(r2));
    __m128i ir2 = _mm_packs_epi32(_mm_castpd_si128(r3), _mm_castpd_si128(*r4));
    __m128i rr = _mm_packs_epi16(ir1, ir2);
#if 1
    rr = _mm_packs_epi16(rr, rr);
    rr = _mm_and_si128(rr, mask);
    _mm_storel_epi64((__m128i*)op, rr);
#else
    rr = _mm_and_si128(rr, mask);
    _mm_storeu_si128((__m128i*)op, rr);
#endif
}

static void
sse2_signbit_DOUBLE(npy_bool * op, npy_double * ip1, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = npy_signbit(ip1[i]) != 0;
    }
    LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i]);
        int r = _mm_movemask_pd(a);
        if (sizeof(npy_double) == 8) {
            op[i] = r & 1;
            op[i + 1] = (r >> 1);
        }
        else {
            op[i] = r & 1;
            op[i + 1] = (r >> 1) & 1;
            op[i + 2] = (r >> 2) & 1;
            op[i + 3] = (r >> 3);
        }
    }
    LOOP_BLOCKED_END {
        op[i] = npy_signbit(ip1[i]) != 0;
    }
}

#line 836

static void
sse2_isnan_DOUBLE(npy_bool * op, npy_double * ip1, npy_intp n)
{
#if 0 != 0 /* isinf/isfinite */
    /* signbit mask 0x7FFFFFFF after andnot */
    const __m128d mask = _mm_set1_pd(-0.);
    const __m128d ones = _mm_cmpeq_pd(_mm_setzero_pd(),
                                             _mm_setzero_pd());
#if 1
    const __m128d fltmax = _mm_set1_pd(DBL_MAX);
#else
    const __m128d fltmax = _mm_set1_pd(FLT_MAX);
#endif
#endif
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = npy_isnan(ip1[i]) != 0;
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1, r2, r3, r4;
#if 0 != 0 /* isinf/isfinite */
        /* fabs via masking of sign bit */
        r1 = _mm_andnot_pd(mask, a);
        r2 = _mm_andnot_pd(mask, b);
        r3 = _mm_andnot_pd(mask, c);
        r4 = _mm_andnot_pd(mask, d);
#if 0 == 1 /* isfinite */
        /* negative compare against max float, nan is always true */
        r1 = _mm_cmpnle_pd(r1, fltmax);
        r2 = _mm_cmpnle_pd(r2, fltmax);
        r3 = _mm_cmpnle_pd(r3, fltmax);
        r4 = _mm_cmpnle_pd(r4, fltmax);
#else /* isinf */
        r1 = _mm_cmpnlt_pd(fltmax, r1);
        r2 = _mm_cmpnlt_pd(fltmax, r2);
        r3 = _mm_cmpnlt_pd(fltmax, r3);
        r4 = _mm_cmpnlt_pd(fltmax, r4);
#endif
        /* flip results to what we want (andnot as there is no sse not) */
        r1 = _mm_andnot_pd(r1, ones);
        r2 = _mm_andnot_pd(r2, ones);
        r3 = _mm_andnot_pd(r3, ones);
        r4 = _mm_andnot_pd(r4, ones);
#endif
#if 0 == 0 /* isnan */
        r1 = _mm_cmpneq_pd(a, a);
        r2 = _mm_cmpneq_pd(b, b);
        r3 = _mm_cmpneq_pd(c, c);
        r4 = _mm_cmpneq_pd(d, d);
#endif
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = npy_isnan(ip1[i]) != 0;
    }
}


#line 836

static void
sse2_isfinite_DOUBLE(npy_bool * op, npy_double * ip1, npy_intp n)
{
#if 1 != 0 /* isinf/isfinite */
    /* signbit mask 0x7FFFFFFF after andnot */
    const __m128d mask = _mm_set1_pd(-0.);
    const __m128d ones = _mm_cmpeq_pd(_mm_setzero_pd(),
                                             _mm_setzero_pd());
#if 1
    const __m128d fltmax = _mm_set1_pd(DBL_MAX);
#else
    const __m128d fltmax = _mm_set1_pd(FLT_MAX);
#endif
#endif
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = npy_isfinite(ip1[i]) != 0;
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1, r2, r3, r4;
#if 1 != 0 /* isinf/isfinite */
        /* fabs via masking of sign bit */
        r1 = _mm_andnot_pd(mask, a);
        r2 = _mm_andnot_pd(mask, b);
        r3 = _mm_andnot_pd(mask, c);
        r4 = _mm_andnot_pd(mask, d);
#if 1 == 1 /* isfinite */
        /* negative compare against max float, nan is always true */
        r1 = _mm_cmpnle_pd(r1, fltmax);
        r2 = _mm_cmpnle_pd(r2, fltmax);
        r3 = _mm_cmpnle_pd(r3, fltmax);
        r4 = _mm_cmpnle_pd(r4, fltmax);
#else /* isinf */
        r1 = _mm_cmpnlt_pd(fltmax, r1);
        r2 = _mm_cmpnlt_pd(fltmax, r2);
        r3 = _mm_cmpnlt_pd(fltmax, r3);
        r4 = _mm_cmpnlt_pd(fltmax, r4);
#endif
        /* flip results to what we want (andnot as there is no sse not) */
        r1 = _mm_andnot_pd(r1, ones);
        r2 = _mm_andnot_pd(r2, ones);
        r3 = _mm_andnot_pd(r3, ones);
        r4 = _mm_andnot_pd(r4, ones);
#endif
#if 1 == 0 /* isnan */
        r1 = _mm_cmpneq_pd(a, a);
        r2 = _mm_cmpneq_pd(b, b);
        r3 = _mm_cmpneq_pd(c, c);
        r4 = _mm_cmpneq_pd(d, d);
#endif
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = npy_isfinite(ip1[i]) != 0;
    }
}


#line 836

static void
sse2_isinf_DOUBLE(npy_bool * op, npy_double * ip1, npy_intp n)
{
#if 2 != 0 /* isinf/isfinite */
    /* signbit mask 0x7FFFFFFF after andnot */
    const __m128d mask = _mm_set1_pd(-0.);
    const __m128d ones = _mm_cmpeq_pd(_mm_setzero_pd(),
                                             _mm_setzero_pd());
#if 1
    const __m128d fltmax = _mm_set1_pd(DBL_MAX);
#else
    const __m128d fltmax = _mm_set1_pd(FLT_MAX);
#endif
#endif
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = npy_isinf(ip1[i]) != 0;
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1, r2, r3, r4;
#if 2 != 0 /* isinf/isfinite */
        /* fabs via masking of sign bit */
        r1 = _mm_andnot_pd(mask, a);
        r2 = _mm_andnot_pd(mask, b);
        r3 = _mm_andnot_pd(mask, c);
        r4 = _mm_andnot_pd(mask, d);
#if 2 == 1 /* isfinite */
        /* negative compare against max float, nan is always true */
        r1 = _mm_cmpnle_pd(r1, fltmax);
        r2 = _mm_cmpnle_pd(r2, fltmax);
        r3 = _mm_cmpnle_pd(r3, fltmax);
        r4 = _mm_cmpnle_pd(r4, fltmax);
#else /* isinf */
        r1 = _mm_cmpnlt_pd(fltmax, r1);
        r2 = _mm_cmpnlt_pd(fltmax, r2);
        r3 = _mm_cmpnlt_pd(fltmax, r3);
        r4 = _mm_cmpnlt_pd(fltmax, r4);
#endif
        /* flip results to what we want (andnot as there is no sse not) */
        r1 = _mm_andnot_pd(r1, ones);
        r2 = _mm_andnot_pd(r2, ones);
        r3 = _mm_andnot_pd(r3, ones);
        r4 = _mm_andnot_pd(r4, ones);
#endif
#if 2 == 0 /* isnan */
        r1 = _mm_cmpneq_pd(a, a);
        r2 = _mm_cmpneq_pd(b, b);
        r3 = _mm_cmpneq_pd(c, c);
        r4 = _mm_cmpneq_pd(d, d);
#endif
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = npy_isinf(ip1[i]) != 0;
    }
}



#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_equal_DOUBLE(const npy_double a, const npy_double b)
{
    __m128d one = _mm_set1_pd(1);
    npy_double tmp;
    __m128d v = _mm_cmpeq_sd(_mm_load_sd(&a),
                                     _mm_load_sd(&b));
    v = _mm_and_pd(v, one);
    _mm_store_sd(&tmp, v);
    return tmp;
}

static void
sse2_binary_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_equal_DOUBLE(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a1 = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b1 = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c1 = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d1 = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d a2 = _mm_loadu_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b2 = _mm_loadu_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c2 = _mm_loadu_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d2 = _mm_loadu_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpeq_pd(a1, a2);
        __m128d r2 = _mm_cmpeq_pd(b1, b2);
        __m128d r3 = _mm_cmpeq_pd(c1, c2);
        __m128d r4 = _mm_cmpeq_pd(d1, d2);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_equal_DOUBLE(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_equal_DOUBLE(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpeq_pd(s, a);
        __m128d r2 = _mm_cmpeq_pd(s, b);
        __m128d r3 = _mm_cmpeq_pd(s, c);
        __m128d r4 = _mm_cmpeq_pd(s, d);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_equal_DOUBLE(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_equal_DOUBLE(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpeq_pd(a, s);
        __m128d r2 = _mm_cmpeq_pd(b, s);
        __m128d r3 = _mm_cmpeq_pd(c, s);
        __m128d r4 = _mm_cmpeq_pd(d, s);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_equal_DOUBLE(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_not_equal_DOUBLE(const npy_double a, const npy_double b)
{
    __m128d one = _mm_set1_pd(1);
    npy_double tmp;
    __m128d v = _mm_cmpneq_sd(_mm_load_sd(&a),
                                     _mm_load_sd(&b));
    v = _mm_and_pd(v, one);
    _mm_store_sd(&tmp, v);
    return tmp;
}

static void
sse2_binary_not_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_not_equal_DOUBLE(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a1 = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b1 = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c1 = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d1 = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d a2 = _mm_loadu_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b2 = _mm_loadu_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c2 = _mm_loadu_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d2 = _mm_loadu_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpneq_pd(a1, a2);
        __m128d r2 = _mm_cmpneq_pd(b1, b2);
        __m128d r3 = _mm_cmpneq_pd(c1, c2);
        __m128d r4 = _mm_cmpneq_pd(d1, d2);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_not_equal_DOUBLE(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_not_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_not_equal_DOUBLE(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpneq_pd(s, a);
        __m128d r2 = _mm_cmpneq_pd(s, b);
        __m128d r3 = _mm_cmpneq_pd(s, c);
        __m128d r4 = _mm_cmpneq_pd(s, d);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_not_equal_DOUBLE(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_not_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_not_equal_DOUBLE(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpneq_pd(a, s);
        __m128d r2 = _mm_cmpneq_pd(b, s);
        __m128d r3 = _mm_cmpneq_pd(c, s);
        __m128d r4 = _mm_cmpneq_pd(d, s);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_not_equal_DOUBLE(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_less_DOUBLE(const npy_double a, const npy_double b)
{
    __m128d one = _mm_set1_pd(1);
    npy_double tmp;
    __m128d v = _mm_cmplt_sd(_mm_load_sd(&a),
                                     _mm_load_sd(&b));
    v = _mm_and_pd(v, one);
    _mm_store_sd(&tmp, v);
    return tmp;
}

static void
sse2_binary_less_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_DOUBLE(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a1 = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b1 = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c1 = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d1 = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d a2 = _mm_loadu_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b2 = _mm_loadu_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c2 = _mm_loadu_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d2 = _mm_loadu_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmplt_pd(a1, a2);
        __m128d r2 = _mm_cmplt_pd(b1, b2);
        __m128d r3 = _mm_cmplt_pd(c1, c2);
        __m128d r4 = _mm_cmplt_pd(d1, d2);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_DOUBLE(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_less_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_DOUBLE(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmplt_pd(s, a);
        __m128d r2 = _mm_cmplt_pd(s, b);
        __m128d r3 = _mm_cmplt_pd(s, c);
        __m128d r4 = _mm_cmplt_pd(s, d);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_DOUBLE(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_less_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_DOUBLE(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmplt_pd(a, s);
        __m128d r2 = _mm_cmplt_pd(b, s);
        __m128d r3 = _mm_cmplt_pd(c, s);
        __m128d r4 = _mm_cmplt_pd(d, s);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_DOUBLE(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_less_equal_DOUBLE(const npy_double a, const npy_double b)
{
    __m128d one = _mm_set1_pd(1);
    npy_double tmp;
    __m128d v = _mm_cmple_sd(_mm_load_sd(&a),
                                     _mm_load_sd(&b));
    v = _mm_and_pd(v, one);
    _mm_store_sd(&tmp, v);
    return tmp;
}

static void
sse2_binary_less_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_equal_DOUBLE(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a1 = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b1 = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c1 = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d1 = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d a2 = _mm_loadu_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b2 = _mm_loadu_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c2 = _mm_loadu_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d2 = _mm_loadu_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmple_pd(a1, a2);
        __m128d r2 = _mm_cmple_pd(b1, b2);
        __m128d r3 = _mm_cmple_pd(c1, c2);
        __m128d r4 = _mm_cmple_pd(d1, d2);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_equal_DOUBLE(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_less_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_equal_DOUBLE(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmple_pd(s, a);
        __m128d r2 = _mm_cmple_pd(s, b);
        __m128d r3 = _mm_cmple_pd(s, c);
        __m128d r4 = _mm_cmple_pd(s, d);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_equal_DOUBLE(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_less_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_less_equal_DOUBLE(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmple_pd(a, s);
        __m128d r2 = _mm_cmple_pd(b, s);
        __m128d r3 = _mm_cmple_pd(c, s);
        __m128d r4 = _mm_cmple_pd(d, s);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_less_equal_DOUBLE(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_greater_DOUBLE(const npy_double a, const npy_double b)
{
    __m128d one = _mm_set1_pd(1);
    npy_double tmp;
    __m128d v = _mm_cmpgt_sd(_mm_load_sd(&a),
                                     _mm_load_sd(&b));
    v = _mm_and_pd(v, one);
    _mm_store_sd(&tmp, v);
    return tmp;
}

static void
sse2_binary_greater_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_DOUBLE(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a1 = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b1 = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c1 = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d1 = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d a2 = _mm_loadu_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b2 = _mm_loadu_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c2 = _mm_loadu_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d2 = _mm_loadu_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpgt_pd(a1, a2);
        __m128d r2 = _mm_cmpgt_pd(b1, b2);
        __m128d r3 = _mm_cmpgt_pd(c1, c2);
        __m128d r4 = _mm_cmpgt_pd(d1, d2);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_DOUBLE(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_greater_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_DOUBLE(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpgt_pd(s, a);
        __m128d r2 = _mm_cmpgt_pd(s, b);
        __m128d r3 = _mm_cmpgt_pd(s, c);
        __m128d r4 = _mm_cmpgt_pd(s, d);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_DOUBLE(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_greater_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_DOUBLE(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpgt_pd(a, s);
        __m128d r2 = _mm_cmpgt_pd(b, s);
        __m128d r3 = _mm_cmpgt_pd(c, s);
        __m128d r4 = _mm_cmpgt_pd(d, s);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_DOUBLE(ip1[i], ip2[0]);
    }
}

#line 904

/* sets invalid fpu flag on QNaN for consistency with packed compare */
static NPY_INLINE int
sse2_ordered_cmp_greater_equal_DOUBLE(const npy_double a, const npy_double b)
{
    __m128d one = _mm_set1_pd(1);
    npy_double tmp;
    __m128d v = _mm_cmpge_sd(_mm_load_sd(&a),
                                     _mm_load_sd(&b));
    v = _mm_and_pd(v, one);
    _mm_store_sd(&tmp, v);
    return tmp;
}

static void
sse2_binary_greater_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_equal_DOUBLE(ip1[i], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a1 = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b1 = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c1 = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d1 = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d a2 = _mm_loadu_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b2 = _mm_loadu_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c2 = _mm_loadu_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d2 = _mm_loadu_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpge_pd(a1, a2);
        __m128d r2 = _mm_cmpge_pd(b1, b2);
        __m128d r3 = _mm_cmpge_pd(c1, c2);
        __m128d r4 = _mm_cmpge_pd(d1, d2);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_equal_DOUBLE(ip1[i], ip2[i]);
    }
}


static void
sse2_binary_scalar1_greater_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip1[0]);
    LOOP_BLOCK_ALIGN_VAR(ip2, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_equal_DOUBLE(ip1[0], ip2[i]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip2[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip2[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip2[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip2[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpge_pd(s, a);
        __m128d r2 = _mm_cmpge_pd(s, b);
        __m128d r3 = _mm_cmpge_pd(s, c);
        __m128d r4 = _mm_cmpge_pd(s, d);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_equal_DOUBLE(ip1[0], ip2[i]);
    }
}


static void
sse2_binary_scalar2_greater_equal_DOUBLE(npy_bool * op, npy_double * ip1, npy_double * ip2, npy_intp n)
{
    __m128d s = _mm_set1_pd(ip2[0]);
    LOOP_BLOCK_ALIGN_VAR(ip1, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = sse2_ordered_cmp_greater_equal_DOUBLE(ip1[i], ip2[0]);
    }
    LOOP_BLOCKED(npy_double, 4 * VECTOR_SIZE_BYTES) {
        __m128d a = _mm_load_pd(&ip1[i + 0 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d b = _mm_load_pd(&ip1[i + 1 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d c = _mm_load_pd(&ip1[i + 2 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d d = _mm_load_pd(&ip1[i + 3 * VECTOR_SIZE_BYTES / sizeof(npy_double)]);
        __m128d r1 = _mm_cmpge_pd(a, s);
        __m128d r2 = _mm_cmpge_pd(b, s);
        __m128d r3 = _mm_cmpge_pd(c, s);
        __m128d r4 = _mm_cmpge_pd(d, s);
        sse2_compress4_to_byte_DOUBLE(r1, r2, r3, &r4, &op[i]);
    }
    LOOP_BLOCKED_END {
        op[i] = sse2_ordered_cmp_greater_equal_DOUBLE(ip1[i], ip2[0]);
    }
}


static void
sse2_sqrt_DOUBLE(npy_double * op, npy_double * ip, const npy_intp n)
{
    /* align output to VECTOR_SIZE_BYTES bytes */
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = npy_sqrt(ip[i]);
    }
    assert(n < (VECTOR_SIZE_BYTES / sizeof(npy_double)) ||
           npy_is_aligned(&op[i], VECTOR_SIZE_BYTES));
    if (npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d d = _mm_load_pd(&ip[i]);
            _mm_store_pd(&op[i], _mm_sqrt_pd(d));
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d d = _mm_loadu_pd(&ip[i]);
            _mm_store_pd(&op[i], _mm_sqrt_pd(d));
        }
    }
    LOOP_BLOCKED_END {
        op[i] = npy_sqrt(ip[i]);
    }
}


static NPY_INLINE
npy_double scalar_abs_npy_double(npy_double v)
{
    /* add 0 to clear -0.0 */
    return (v > 0 ? v: -v) + 0;
}

static NPY_INLINE
npy_double scalar_neg_npy_double(npy_double v)
{
    return -v;
}

#line 1038
static void
sse2_absolute_DOUBLE(npy_double * op, npy_double * ip, const npy_intp n)
{
    /*
     * get 0x7FFFFFFF mask (everything but signbit set)
     * float & ~mask will remove the sign, float ^ mask flips the sign
     * this is equivalent to how the compiler implements fabs on amd64
     */
    const __m128d mask = _mm_set1_pd(-0.);

    /* align output to VECTOR_SIZE_BYTES bytes */
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = scalar_abs_npy_double(ip[i]);
    }
    assert(n < (VECTOR_SIZE_BYTES / sizeof(npy_double)) ||
           npy_is_aligned(&op[i], VECTOR_SIZE_BYTES));
    if (npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip[i]);
            _mm_store_pd(&op[i], _mm_andnot_pd(mask, a));
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip[i]);
            _mm_store_pd(&op[i], _mm_andnot_pd(mask, a));
        }
    }
    LOOP_BLOCKED_END {
        op[i] = scalar_abs_npy_double(ip[i]);
    }
}

#line 1038
static void
sse2_negative_DOUBLE(npy_double * op, npy_double * ip, const npy_intp n)
{
    /*
     * get 0x7FFFFFFF mask (everything but signbit set)
     * float & ~mask will remove the sign, float ^ mask flips the sign
     * this is equivalent to how the compiler implements fabs on amd64
     */
    const __m128d mask = _mm_set1_pd(-0.);

    /* align output to VECTOR_SIZE_BYTES bytes */
    LOOP_BLOCK_ALIGN_VAR(op, npy_double, VECTOR_SIZE_BYTES) {
        op[i] = scalar_neg_npy_double(ip[i]);
    }
    assert(n < (VECTOR_SIZE_BYTES / sizeof(npy_double)) ||
           npy_is_aligned(&op[i], VECTOR_SIZE_BYTES));
    if (npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES)) {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_load_pd(&ip[i]);
            _mm_store_pd(&op[i], _mm_xor_pd(mask, a));
        }
    }
    else {
        LOOP_BLOCKED(npy_double, VECTOR_SIZE_BYTES) {
            __m128d a = _mm_loadu_pd(&ip[i]);
            _mm_store_pd(&op[i], _mm_xor_pd(mask, a));
        }
    }
    LOOP_BLOCKED_END {
        op[i] = scalar_neg_npy_double(ip[i]);
    }
}



#line 1078
/* arguments swapped as unary reduce has the swapped compared to unary */
static void
sse2_maximum_DOUBLE(npy_double * ip, npy_double * op, const npy_intp n)
{
    const npy_intp stride = VECTOR_SIZE_BYTES / (npy_intp)sizeof(npy_double);
    LOOP_BLOCK_ALIGN_VAR(ip, npy_double, VECTOR_SIZE_BYTES) {
        /* Order of operations important for MSVC 2015 */
        *op = (*op >= ip[i] || npy_isnan(*op)) ? *op : ip[i];
    }
    assert(n < (stride) || npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES));
    if (i + 3 * stride <= n) {
        /* load the first elements */
        __m128d c1 = _mm_load_pd((npy_double*)&ip[i]);
        __m128d c2 = _mm_load_pd((npy_double*)&ip[i + stride]);
        i += 2 * stride;

        /* minps/minpd will set invalid flag if nan is encountered */
        npy_clear_floatstatus_barrier((char*)&c1);
        LOOP_BLOCKED(npy_double, 2 * VECTOR_SIZE_BYTES) {
            __m128d v1 = _mm_load_pd((npy_double*)&ip[i]);
            __m128d v2 = _mm_load_pd((npy_double*)&ip[i + stride]);
            c1 = _mm_max_pd(c1, v1);
            c2 = _mm_max_pd(c2, v2);
        }
        c1 = _mm_max_pd(c1, c2);

        if (npy_get_floatstatus_barrier((char*)&c1) & NPY_FPE_INVALID) {
            *op = NPY_NAN;
        }
        else {
            npy_double tmp = sse2_horizontal_max___m128d(c1);
            /* Order of operations important for MSVC 2015 */
            *op  = (*op >= tmp || npy_isnan(*op)) ? *op : tmp;
        }
    }
    LOOP_BLOCKED_END {
        /* Order of operations important for MSVC 2015 */
        *op  = (*op >= ip[i] || npy_isnan(*op)) ? *op : ip[i];
    }
    npy_clear_floatstatus_barrier((char*)op);
}

#line 1078
/* arguments swapped as unary reduce has the swapped compared to unary */
static void
sse2_minimum_DOUBLE(npy_double * ip, npy_double * op, const npy_intp n)
{
    const npy_intp stride = VECTOR_SIZE_BYTES / (npy_intp)sizeof(npy_double);
    LOOP_BLOCK_ALIGN_VAR(ip, npy_double, VECTOR_SIZE_BYTES) {
        /* Order of operations important for MSVC 2015 */
        *op = (*op <= ip[i] || npy_isnan(*op)) ? *op : ip[i];
    }
    assert(n < (stride) || npy_is_aligned(&ip[i], VECTOR_SIZE_BYTES));
    if (i + 3 * stride <= n) {
        /* load the first elements */
        __m128d c1 = _mm_load_pd((npy_double*)&ip[i]);
        __m128d c2 = _mm_load_pd((npy_double*)&ip[i + stride]);
        i += 2 * stride;

        /* minps/minpd will set invalid flag if nan is encountered */
        npy_clear_floatstatus_barrier((char*)&c1);
        LOOP_BLOCKED(npy_double, 2 * VECTOR_SIZE_BYTES) {
            __m128d v1 = _mm_load_pd((npy_double*)&ip[i]);
            __m128d v2 = _mm_load_pd((npy_double*)&ip[i + stride]);
            c1 = _mm_min_pd(c1, v1);
            c2 = _mm_min_pd(c2, v2);
        }
        c1 = _mm_min_pd(c1, c2);

        if (npy_get_floatstatus_barrier((char*)&c1) & NPY_FPE_INVALID) {
            *op = NPY_NAN;
        }
        else {
            npy_double tmp = sse2_horizontal_min___m128d(c1);
            /* Order of operations important for MSVC 2015 */
            *op  = (*op <= tmp || npy_isnan(*op)) ? *op : tmp;
        }
    }
    LOOP_BLOCKED_END {
        /* Order of operations important for MSVC 2015 */
        *op  = (*op <= ip[i] || npy_isnan(*op)) ? *op : ip[i];
    }
    npy_clear_floatstatus_barrier((char*)op);
}




/* bunch of helper functions used in ISA_exp/log_FLOAT*/

#if defined HAVE_ATTRIBUTE_TARGET_AVX2_WITH_INTRINSICS
static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_fmadd(__m256 a, __m256 b, __m256 c)
{
    return _mm256_add_ps(_mm256_mul_ps(a, b), c);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_get_full_load_mask(void)
{
    return _mm256_set1_ps(-1.0);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_get_partial_load_mask(const npy_int num_lanes, const npy_int total_elem)
{
    float maskint[16] = {-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
                            1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
    float* addr = maskint + total_elem - num_lanes;
    return _mm256_loadu_ps(addr);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_masked_gather(__m256 src,
                   npy_float* addr,
                   __m256i vindex,
                   __m256 mask)
{
    return _mm256_mask_i32gather_ps(src, addr, vindex, mask, 4);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_masked_load(__m256 mask, npy_float* addr)
{
    return _mm256_maskload_ps(addr, _mm256_cvtps_epi32(mask));
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_set_masked_lanes(__m256 x, __m256 val, __m256 mask)
{
    return _mm256_blendv_ps(x, val, mask);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_blend(__m256 x, __m256 y, __m256 ymask)
{
    return _mm256_blendv_ps(x, y, ymask);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_get_exponent(__m256 x)
{
    /*
     * Special handling of denormals:
     * 1) Multiply denormal elements with 2**100 (0x71800000)
     * 2) Get the 8 bits of unbiased exponent
     * 3) Subtract 100 from exponent of denormals
     */

    __m256 two_power_100 = _mm256_castsi256_ps(_mm256_set1_epi32(0x71800000));
    __m256 denormal_mask = _mm256_cmp_ps(x, _mm256_set1_ps(FLT_MIN), _CMP_LT_OQ);
    __m256 normal_mask = _mm256_cmp_ps(x, _mm256_set1_ps(FLT_MIN), _CMP_GE_OQ);

    __m256 temp1 = _mm256_blendv_ps(x, _mm256_set1_ps(0.0f), normal_mask);
    __m256 temp = _mm256_mul_ps(temp1, two_power_100);
    x = _mm256_blendv_ps(x, temp, denormal_mask);

    __m256 exp = _mm256_cvtepi32_ps(
                    _mm256_sub_epi32(
                        _mm256_srli_epi32(
                            _mm256_castps_si256(x), 23),_mm256_set1_epi32(0x7E)));

    __m256 denorm_exp = _mm256_sub_ps(exp, _mm256_set1_ps(100.0f));
    return _mm256_blendv_ps(exp, denorm_exp, denormal_mask);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_get_mantissa(__m256 x)
{
    /*
     * Special handling of denormals:
     * 1) Multiply denormal elements with 2**100 (0x71800000)
     * 2) Get the 23 bits of mantissa
     * 3) Mantissa for denormals is not affected by the multiplication
     */

    __m256 two_power_100 = _mm256_castsi256_ps(_mm256_set1_epi32(0x71800000));
    __m256 denormal_mask = _mm256_cmp_ps(x, _mm256_set1_ps(FLT_MIN), _CMP_LT_OQ);
    __m256 normal_mask = _mm256_cmp_ps(x, _mm256_set1_ps(FLT_MIN), _CMP_GE_OQ);

    __m256 temp1 = _mm256_blendv_ps(x, _mm256_set1_ps(0.0f), normal_mask);
    __m256 temp = _mm256_mul_ps(temp1, two_power_100);
    x = _mm256_blendv_ps(x, temp, denormal_mask);

    __m256i mantissa_bits = _mm256_set1_epi32(0x7fffff);
    __m256i exp_126_bits  = _mm256_set1_epi32(126 << 23);
    return _mm256_castsi256_ps(
                _mm256_or_si256(
                    _mm256_and_si256(
                        _mm256_castps_si256(x), mantissa_bits), exp_126_bits));
}
#endif

#if defined HAVE_ATTRIBUTE_TARGET_AVX512F_WITH_INTRINSICS
static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F __mmask16
avx512_get_full_load_mask(void)
{
    return 0xFFFF;
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F __mmask16
avx512_get_partial_load_mask(const npy_int num_elem, const npy_int total_elem)
{
    return (0x0001 << num_elem) - 0x0001;
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F __m512
avx512_masked_gather(__m512 src,
                     npy_float* addr,
                     __m512i vindex,
                     __mmask16 kmask)
{
    return _mm512_mask_i32gather_ps(src, kmask, vindex, addr, 4);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F __m512
avx512_masked_load(__mmask16 mask, npy_float* addr)
{
    return _mm512_maskz_loadu_ps(mask, (__m512 *)addr);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F __m512
avx512_set_masked_lanes(__m512 x, __m512 val, __mmask16 mask)
{
    return _mm512_mask_blend_ps(mask, x, val);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F __m512
avx512_blend(__m512 x, __m512 y, __mmask16 ymask)
{
    return _mm512_mask_mov_ps(x, ymask, y);
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F __m512
avx512_get_exponent(__m512 x)
{
    return _mm512_add_ps(_mm512_getexp_ps(x), _mm512_set1_ps(1.0f));
}

static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F __m512
avx512_get_mantissa(__m512 x)
{
    return _mm512_getmant_ps(x, _MM_MANT_NORM_p5_1, _MM_MANT_SIGN_src);
}
#endif

#line 1291

#if defined HAVE_ATTRIBUTE_TARGET_AVX2_WITH_INTRINSICS
static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 __m256
avx2_range_reduction(__m256 x, __m256 y, __m256 c1, __m256 c2, __m256 c3)
{
    __m256 reduced_x = avx2_fmadd(y, c1, x);
    reduced_x = avx2_fmadd(y, c2, reduced_x);
    reduced_x = avx2_fmadd(y, c3, reduced_x);
    return reduced_x;
}
#endif

#line 1291

#if defined HAVE_ATTRIBUTE_TARGET_AVX512F_WITH_INTRINSICS
static NPY_INLINE NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F __m512
avx512_range_reduction(__m512 x, __m512 y, __m512 c1, __m512 c2, __m512 c3)
{
    __m512 reduced_x = _mm512_fmadd_ps(y, c1, x);
    reduced_x = _mm512_fmadd_ps(y, c2, reduced_x);
    reduced_x = _mm512_fmadd_ps(y, c3, reduced_x);
    return reduced_x;
}
#endif


#line 1321


/*
 * Vectorized implementation of exp using AVX2 and AVX512:
 * 1) if x >= xmax; return INF (overflow)
 * 2) if x <= xmin; return 0.0f (underflow)
 * 3) Range reduction (using Coyd-Waite):
 *      a) y = x - k*ln(2); k = rint(x/ln(2)); y \in [0, ln(2)]
 * 4) Compute exp(y) = P/Q, ratio of 2 polynomials P and Q
 *      b) P = 5th order and Q = 2nd order polynomials obtained from Remez's
 *      algorithm (mini-max polynomial approximation)
 * 5) Compute exp(x) = exp(y) * 2^k
 * 6) Max ULP error measured across all 32-bit FP's = 2.52 (x = 0xc2781e37)
 * 7) Max relative error measured across all 32-bit FP's= 2.1264E-07 (for the
 * same x = 0xc2781e37)
 */

#if defined HAVE_ATTRIBUTE_TARGET_AVX2_WITH_INTRINSICS
static NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 void
AVX2_exp_FLOAT(npy_float * op,
                npy_float * ip,
                const npy_intp array_size,
                const npy_intp steps)
{
    const npy_intp stride = steps/sizeof(npy_float);
    const npy_int num_lanes = 32/sizeof(npy_float);
    npy_float xmax = 88.72283935546875f;
    npy_float xmin = -87.3365478515625f;
    npy_int indexarr[16];
    for (npy_int ii = 0; ii < 16; ii++) {
        indexarr[ii] = ii*stride;
    }

    /* Load up frequently used constants */
    __m256 codyw_c1 = _mm256_set1_ps(NPY_CODY_WAITE_LOGE_2_HIGHf);
    __m256 codyw_c2 = _mm256_set1_ps(NPY_CODY_WAITE_LOGE_2_LOWf);
    __m256 exp_p0 = _mm256_set1_ps(NPY_COEFF_P0_EXPf);
    __m256 exp_p1 = _mm256_set1_ps(NPY_COEFF_P1_EXPf);
    __m256 exp_p2 = _mm256_set1_ps(NPY_COEFF_P2_EXPf);
    __m256 exp_p3 = _mm256_set1_ps(NPY_COEFF_P3_EXPf);
    __m256 exp_p4 = _mm256_set1_ps(NPY_COEFF_P4_EXPf);
    __m256 exp_p5 = _mm256_set1_ps(NPY_COEFF_P5_EXPf);
    __m256 exp_q0 = _mm256_set1_ps(NPY_COEFF_Q0_EXPf);
    __m256 exp_q1 = _mm256_set1_ps(NPY_COEFF_Q1_EXPf);
    __m256 exp_q2 = _mm256_set1_ps(NPY_COEFF_Q2_EXPf);
    __m256 cvt_magic = _mm256_set1_ps(NPY_RINT_CVT_MAGICf);
    __m256 log2e = _mm256_set1_ps(NPY_LOG2Ef);
    __m256 inf = _mm256_set1_ps(NPY_INFINITYF);
    __m256 zeros_f = _mm256_set1_ps(0.0f);
    __m256 poly, num_poly, denom_poly, quadrant;
    __m256i vindex = _mm256_loadu_si256((__m256i*)&indexarr[0]);
    __m256i exponent;

    __m256 xmax_mask, xmin_mask, nan_mask, inf_mask;
    __m256 overflow_mask = avx2_get_partial_load_mask(0, num_lanes);
    __m256 load_mask = avx2_get_full_load_mask();
    npy_intp num_remaining_elements = array_size;

    while (num_remaining_elements > 0) {

        if (num_remaining_elements < num_lanes) {
            load_mask = avx2_get_partial_load_mask(num_remaining_elements,
                                                    num_lanes);
        }

        __m256 x;
        if (stride == 1) {
            x = avx2_masked_load(load_mask, ip);
        }
        else {
            x = avx2_masked_gather(zeros_f, ip, vindex, load_mask);
        }

        nan_mask = _mm256_cmp_ps(x, x, _CMP_NEQ_UQ);
        x = avx2_set_masked_lanes(x, zeros_f, nan_mask);

        xmax_mask = _mm256_cmp_ps(x, _mm256_set1_ps(xmax), _CMP_GE_OQ);
        xmin_mask = _mm256_cmp_ps(x, _mm256_set1_ps(xmin), _CMP_LE_OQ);
        inf_mask = _mm256_cmp_ps(x, inf, _CMP_EQ_OQ);
        overflow_mask = _mm256_or_ps(overflow_mask,
                                    _mm256_xor_ps(xmax_mask, inf_mask));

        x = avx2_set_masked_lanes(x, zeros_f, _mm256_or_ps(
                                    _mm256_or_ps(nan_mask, xmin_mask), xmax_mask));

        quadrant = _mm256_mul_ps(x, log2e);

        /* round to nearest */
        quadrant = _mm256_add_ps(quadrant, cvt_magic);
        quadrant = _mm256_sub_ps(quadrant, cvt_magic);

        /* Cody-Waite's range reduction algorithm */
        x = avx2_range_reduction(x, quadrant, codyw_c1, codyw_c2, zeros_f);

        num_poly = avx2_fmadd(exp_p5, x, exp_p4);
        num_poly = avx2_fmadd(num_poly, x, exp_p3);
        num_poly = avx2_fmadd(num_poly, x, exp_p2);
        num_poly = avx2_fmadd(num_poly, x, exp_p1);
        num_poly = avx2_fmadd(num_poly, x, exp_p0);
        denom_poly = avx2_fmadd(exp_q2, x, exp_q1);
        denom_poly = avx2_fmadd(denom_poly, x, exp_q0);
        poly = _mm256_div_ps(num_poly, denom_poly);

        /*
         * compute val = poly * 2^quadrant; which is same as adding the
         * exponent of quadrant to the exponent of poly. quadrant is an int,
         * so extracting exponent is simply extracting 8 bits.
         */
        exponent = _mm256_slli_epi32(_mm256_cvtps_epi32(quadrant), 23);
        poly = _mm256_castsi256_ps(
                    _mm256_add_epi32(
                        _mm256_castps_si256(poly), exponent));

        /*
         * elem > xmax; return inf
         * elem < xmin; return 0.0f
         * elem = +/- nan, return nan
         */
        poly = avx2_set_masked_lanes(poly, _mm256_set1_ps(NPY_NANF), nan_mask);
        poly = avx2_set_masked_lanes(poly, inf, xmax_mask);
        poly = avx2_set_masked_lanes(poly, zeros_f, xmin_mask);

        _mm256_maskstore_ps(op, _mm256_cvtps_epi32(load_mask), poly);

        ip += num_lanes*stride;
        op += num_lanes;
        num_remaining_elements -= num_lanes;
    }

    if (_mm256_movemask_ps(overflow_mask)) {
        npy_set_floatstatus_overflow();
    }
}

/*
 * Vectorized implementation of log using AVX2 and AVX512
 * 1) if x < 0.0f; return -NAN (invalid input)
 * 2) Range reduction: y = x/2^k;
 *      a) y = normalized mantissa, k is the exponent (0.5 <= y < 1)
 * 3) Compute log(y) = P/Q, ratio of 2 polynomials P and Q
 *      b) P = 5th order and Q = 5th order polynomials obtained from Remez's
 *      algorithm (mini-max polynomial approximation)
 * 5) Compute log(x) = log(y) + k*ln(2)
 * 6) Max ULP error measured across all 32-bit FP's = 3.83 (x = 0x3f486945)
 * 7) Max relative error measured across all 32-bit FP's = 2.359E-07 (for same
 * x = 0x3f486945)
 */

static NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX2 void
AVX2_log_FLOAT(npy_float * op,
                npy_float * ip,
                const npy_intp array_size,
                const npy_intp steps)
{
    const npy_intp stride = steps/sizeof(npy_float);
    const npy_int num_lanes = 32/sizeof(npy_float);
    npy_int indexarr[16];
    for (npy_int ii = 0; ii < 16; ii++) {
        indexarr[ii] = ii*stride;
    }

    /* Load up frequently used constants */
    __m256 log_p0 = _mm256_set1_ps(NPY_COEFF_P0_LOGf);
    __m256 log_p1 = _mm256_set1_ps(NPY_COEFF_P1_LOGf);
    __m256 log_p2 = _mm256_set1_ps(NPY_COEFF_P2_LOGf);
    __m256 log_p3 = _mm256_set1_ps(NPY_COEFF_P3_LOGf);
    __m256 log_p4 = _mm256_set1_ps(NPY_COEFF_P4_LOGf);
    __m256 log_p5 = _mm256_set1_ps(NPY_COEFF_P5_LOGf);
    __m256 log_q0 = _mm256_set1_ps(NPY_COEFF_Q0_LOGf);
    __m256 log_q1 = _mm256_set1_ps(NPY_COEFF_Q1_LOGf);
    __m256 log_q2 = _mm256_set1_ps(NPY_COEFF_Q2_LOGf);
    __m256 log_q3 = _mm256_set1_ps(NPY_COEFF_Q3_LOGf);
    __m256 log_q4 = _mm256_set1_ps(NPY_COEFF_Q4_LOGf);
    __m256 log_q5 = _mm256_set1_ps(NPY_COEFF_Q5_LOGf);
    __m256 loge2 = _mm256_set1_ps(NPY_LOGE2f);
    __m256 nan = _mm256_set1_ps(NPY_NANF);
    __m256 neg_inf = _mm256_set1_ps(-NPY_INFINITYF);
    __m256 inf = _mm256_set1_ps(NPY_INFINITYF);
    __m256 zeros_f = _mm256_set1_ps(0.0f);
    __m256 ones_f = _mm256_set1_ps(1.0f);
    __m256i vindex = _mm256_loadu_si256((__m256i*)indexarr);
    __m256 poly, num_poly, denom_poly, exponent;

    __m256 inf_mask, nan_mask, sqrt2_mask, zero_mask, negx_mask;
    __m256 invalid_mask = avx2_get_partial_load_mask(0, num_lanes);
    __m256 divide_by_zero_mask = invalid_mask;
    __m256 load_mask = avx2_get_full_load_mask();
    npy_intp num_remaining_elements = array_size;

    while (num_remaining_elements > 0) {

        if (num_remaining_elements < num_lanes) {
            load_mask = avx2_get_partial_load_mask(num_remaining_elements,
                                                    num_lanes);
        }

        __m256 x_in;
        if (stride == 1) {
            x_in = avx2_masked_load(load_mask, ip);
        }
        else {
            x_in  = avx2_masked_gather(zeros_f, ip, vindex, load_mask);
        }

        negx_mask = _mm256_cmp_ps(x_in, zeros_f, _CMP_LT_OQ);
        zero_mask = _mm256_cmp_ps(x_in, zeros_f, _CMP_EQ_OQ);
        inf_mask = _mm256_cmp_ps(x_in, inf, _CMP_EQ_OQ);
        nan_mask = _mm256_cmp_ps(x_in, x_in, _CMP_NEQ_UQ);
        divide_by_zero_mask = _mm256_or_ps(divide_by_zero_mask,
                                        _mm256_and_ps(zero_mask, load_mask));
        invalid_mask = _mm256_or_ps(invalid_mask, negx_mask);

        __m256 x = avx2_set_masked_lanes(x_in, zeros_f, negx_mask);

        /* set x = normalized mantissa */
        exponent = avx2_get_exponent(x);
        x = avx2_get_mantissa(x);

        /* if x < sqrt(2) {exp = exp-1; x = 2*x} */
        sqrt2_mask = _mm256_cmp_ps(x, _mm256_set1_ps(NPY_SQRT1_2f), _CMP_LE_OQ);
        x = avx2_blend(x, _mm256_add_ps(x,x), sqrt2_mask);
        exponent = avx2_blend(exponent,
                               _mm256_sub_ps(exponent,ones_f), sqrt2_mask);

        /* x = x - 1 */
        x = _mm256_sub_ps(x, ones_f);

        /* Polynomial approximation for log(1+x) */
        num_poly = avx2_fmadd(log_p5, x, log_p4);
        num_poly = avx2_fmadd(num_poly, x, log_p3);
        num_poly = avx2_fmadd(num_poly, x, log_p2);
        num_poly = avx2_fmadd(num_poly, x, log_p1);
        num_poly = avx2_fmadd(num_poly, x, log_p0);
        denom_poly = avx2_fmadd(log_q5, x, log_q4);
        denom_poly = avx2_fmadd(denom_poly, x, log_q3);
        denom_poly = avx2_fmadd(denom_poly, x, log_q2);
        denom_poly = avx2_fmadd(denom_poly, x, log_q1);
        denom_poly = avx2_fmadd(denom_poly, x, log_q0);
        poly = _mm256_div_ps(num_poly, denom_poly);
        poly = avx2_fmadd(exponent, loge2, poly);

        /*
         * x < 0.0f; return NAN
         * x = +/- NAN; return NAN
         * x = 0.0f; return -INF
         */
        poly = avx2_set_masked_lanes(poly, nan, _mm256_or_ps(negx_mask, nan_mask));
        poly = avx2_set_masked_lanes(poly, neg_inf, zero_mask);
        poly = avx2_set_masked_lanes(poly, inf, inf_mask);

        _mm256_maskstore_ps(op, _mm256_cvtps_epi32(load_mask), poly);

        ip += num_lanes*stride;
        op += num_lanes;
        num_remaining_elements -= num_lanes;
    }

    if (_mm256_movemask_ps(invalid_mask)) {
        npy_set_floatstatus_invalid();
    }
    if (_mm256_movemask_ps(divide_by_zero_mask)) {
        npy_set_floatstatus_divbyzero();
    }
}
#endif

#line 1321


/*
 * Vectorized implementation of exp using AVX2 and AVX512:
 * 1) if x >= xmax; return INF (overflow)
 * 2) if x <= xmin; return 0.0f (underflow)
 * 3) Range reduction (using Coyd-Waite):
 *      a) y = x - k*ln(2); k = rint(x/ln(2)); y \in [0, ln(2)]
 * 4) Compute exp(y) = P/Q, ratio of 2 polynomials P and Q
 *      b) P = 5th order and Q = 2nd order polynomials obtained from Remez's
 *      algorithm (mini-max polynomial approximation)
 * 5) Compute exp(x) = exp(y) * 2^k
 * 6) Max ULP error measured across all 32-bit FP's = 2.52 (x = 0xc2781e37)
 * 7) Max relative error measured across all 32-bit FP's= 2.1264E-07 (for the
 * same x = 0xc2781e37)
 */

#if defined HAVE_ATTRIBUTE_TARGET_AVX512F_WITH_INTRINSICS
static NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F void
AVX512F_exp_FLOAT(npy_float * op,
                npy_float * ip,
                const npy_intp array_size,
                const npy_intp steps)
{
    const npy_intp stride = steps/sizeof(npy_float);
    const npy_int num_lanes = 64/sizeof(npy_float);
    npy_float xmax = 88.72283935546875f;
    npy_float xmin = -87.3365478515625f;
    npy_int indexarr[16];
    for (npy_int ii = 0; ii < 16; ii++) {
        indexarr[ii] = ii*stride;
    }

    /* Load up frequently used constants */
    __m512 codyw_c1 = _mm512_set1_ps(NPY_CODY_WAITE_LOGE_2_HIGHf);
    __m512 codyw_c2 = _mm512_set1_ps(NPY_CODY_WAITE_LOGE_2_LOWf);
    __m512 exp_p0 = _mm512_set1_ps(NPY_COEFF_P0_EXPf);
    __m512 exp_p1 = _mm512_set1_ps(NPY_COEFF_P1_EXPf);
    __m512 exp_p2 = _mm512_set1_ps(NPY_COEFF_P2_EXPf);
    __m512 exp_p3 = _mm512_set1_ps(NPY_COEFF_P3_EXPf);
    __m512 exp_p4 = _mm512_set1_ps(NPY_COEFF_P4_EXPf);
    __m512 exp_p5 = _mm512_set1_ps(NPY_COEFF_P5_EXPf);
    __m512 exp_q0 = _mm512_set1_ps(NPY_COEFF_Q0_EXPf);
    __m512 exp_q1 = _mm512_set1_ps(NPY_COEFF_Q1_EXPf);
    __m512 exp_q2 = _mm512_set1_ps(NPY_COEFF_Q2_EXPf);
    __m512 cvt_magic = _mm512_set1_ps(NPY_RINT_CVT_MAGICf);
    __m512 log2e = _mm512_set1_ps(NPY_LOG2Ef);
    __m512 inf = _mm512_set1_ps(NPY_INFINITYF);
    __m512 zeros_f = _mm512_set1_ps(0.0f);
    __m512 poly, num_poly, denom_poly, quadrant;
    __m512i vindex = _mm512_loadu_si512((__m512i*)&indexarr[0]);
    __m512i exponent;

    __mmask16 xmax_mask, xmin_mask, nan_mask, inf_mask;
    __mmask16 overflow_mask = avx512_get_partial_load_mask(0, num_lanes);
    __mmask16 load_mask = avx512_get_full_load_mask();
    npy_intp num_remaining_elements = array_size;

    while (num_remaining_elements > 0) {

        if (num_remaining_elements < num_lanes) {
            load_mask = avx512_get_partial_load_mask(num_remaining_elements,
                                                    num_lanes);
        }

        __m512 x;
        if (stride == 1) {
            x = avx512_masked_load(load_mask, ip);
        }
        else {
            x = avx512_masked_gather(zeros_f, ip, vindex, load_mask);
        }

        nan_mask = _mm512_cmp_ps_mask(x, x, _CMP_NEQ_UQ);
        x = avx512_set_masked_lanes(x, zeros_f, nan_mask);

        xmax_mask = _mm512_cmp_ps_mask(x, _mm512_set1_ps(xmax), _CMP_GE_OQ);
        xmin_mask = _mm512_cmp_ps_mask(x, _mm512_set1_ps(xmin), _CMP_LE_OQ);
        inf_mask = _mm512_cmp_ps_mask(x, inf, _CMP_EQ_OQ);
        overflow_mask = _mm512_kor(overflow_mask,
                                    _mm512_kxor(xmax_mask, inf_mask));

        x = avx512_set_masked_lanes(x, zeros_f, _mm512_kor(
                                    _mm512_kor(nan_mask, xmin_mask), xmax_mask));

        quadrant = _mm512_mul_ps(x, log2e);

        /* round to nearest */
        quadrant = _mm512_add_ps(quadrant, cvt_magic);
        quadrant = _mm512_sub_ps(quadrant, cvt_magic);

        /* Cody-Waite's range reduction algorithm */
        x = avx512_range_reduction(x, quadrant, codyw_c1, codyw_c2, zeros_f);

        num_poly = _mm512_fmadd_ps(exp_p5, x, exp_p4);
        num_poly = _mm512_fmadd_ps(num_poly, x, exp_p3);
        num_poly = _mm512_fmadd_ps(num_poly, x, exp_p2);
        num_poly = _mm512_fmadd_ps(num_poly, x, exp_p1);
        num_poly = _mm512_fmadd_ps(num_poly, x, exp_p0);
        denom_poly = _mm512_fmadd_ps(exp_q2, x, exp_q1);
        denom_poly = _mm512_fmadd_ps(denom_poly, x, exp_q0);
        poly = _mm512_div_ps(num_poly, denom_poly);

        /*
         * compute val = poly * 2^quadrant; which is same as adding the
         * exponent of quadrant to the exponent of poly. quadrant is an int,
         * so extracting exponent is simply extracting 8 bits.
         */
        exponent = _mm512_slli_epi32(_mm512_cvtps_epi32(quadrant), 23);
        poly = _mm512_castsi512_ps(
                    _mm512_add_epi32(
                        _mm512_castps_si512(poly), exponent));

        /*
         * elem > xmax; return inf
         * elem < xmin; return 0.0f
         * elem = +/- nan, return nan
         */
        poly = avx512_set_masked_lanes(poly, _mm512_set1_ps(NPY_NANF), nan_mask);
        poly = avx512_set_masked_lanes(poly, inf, xmax_mask);
        poly = avx512_set_masked_lanes(poly, zeros_f, xmin_mask);

        _mm512_mask_storeu_ps(op, (load_mask), poly);

        ip += num_lanes*stride;
        op += num_lanes;
        num_remaining_elements -= num_lanes;
    }

    if ((overflow_mask)) {
        npy_set_floatstatus_overflow();
    }
}

/*
 * Vectorized implementation of log using AVX2 and AVX512
 * 1) if x < 0.0f; return -NAN (invalid input)
 * 2) Range reduction: y = x/2^k;
 *      a) y = normalized mantissa, k is the exponent (0.5 <= y < 1)
 * 3) Compute log(y) = P/Q, ratio of 2 polynomials P and Q
 *      b) P = 5th order and Q = 5th order polynomials obtained from Remez's
 *      algorithm (mini-max polynomial approximation)
 * 5) Compute log(x) = log(y) + k*ln(2)
 * 6) Max ULP error measured across all 32-bit FP's = 3.83 (x = 0x3f486945)
 * 7) Max relative error measured across all 32-bit FP's = 2.359E-07 (for same
 * x = 0x3f486945)
 */

static NPY_GCC_OPT_3 NPY_GCC_TARGET_AVX512F void
AVX512F_log_FLOAT(npy_float * op,
                npy_float * ip,
                const npy_intp array_size,
                const npy_intp steps)
{
    const npy_intp stride = steps/sizeof(npy_float);
    const npy_int num_lanes = 64/sizeof(npy_float);
    npy_int indexarr[16];
    for (npy_int ii = 0; ii < 16; ii++) {
        indexarr[ii] = ii*stride;
    }

    /* Load up frequently used constants */
    __m512 log_p0 = _mm512_set1_ps(NPY_COEFF_P0_LOGf);
    __m512 log_p1 = _mm512_set1_ps(NPY_COEFF_P1_LOGf);
    __m512 log_p2 = _mm512_set1_ps(NPY_COEFF_P2_LOGf);
    __m512 log_p3 = _mm512_set1_ps(NPY_COEFF_P3_LOGf);
    __m512 log_p4 = _mm512_set1_ps(NPY_COEFF_P4_LOGf);
    __m512 log_p5 = _mm512_set1_ps(NPY_COEFF_P5_LOGf);
    __m512 log_q0 = _mm512_set1_ps(NPY_COEFF_Q0_LOGf);
    __m512 log_q1 = _mm512_set1_ps(NPY_COEFF_Q1_LOGf);
    __m512 log_q2 = _mm512_set1_ps(NPY_COEFF_Q2_LOGf);
    __m512 log_q3 = _mm512_set1_ps(NPY_COEFF_Q3_LOGf);
    __m512 log_q4 = _mm512_set1_ps(NPY_COEFF_Q4_LOGf);
    __m512 log_q5 = _mm512_set1_ps(NPY_COEFF_Q5_LOGf);
    __m512 loge2 = _mm512_set1_ps(NPY_LOGE2f);
    __m512 nan = _mm512_set1_ps(NPY_NANF);
    __m512 neg_inf = _mm512_set1_ps(-NPY_INFINITYF);
    __m512 inf = _mm512_set1_ps(NPY_INFINITYF);
    __m512 zeros_f = _mm512_set1_ps(0.0f);
    __m512 ones_f = _mm512_set1_ps(1.0f);
    __m512i vindex = _mm512_loadu_si512((__m512i*)indexarr);
    __m512 poly, num_poly, denom_poly, exponent;

    __mmask16 inf_mask, nan_mask, sqrt2_mask, zero_mask, negx_mask;
    __mmask16 invalid_mask = avx512_get_partial_load_mask(0, num_lanes);
    __mmask16 divide_by_zero_mask = invalid_mask;
    __mmask16 load_mask = avx512_get_full_load_mask();
    npy_intp num_remaining_elements = array_size;

    while (num_remaining_elements > 0) {

        if (num_remaining_elements < num_lanes) {
            load_mask = avx512_get_partial_load_mask(num_remaining_elements,
                                                    num_lanes);
        }

        __m512 x_in;
        if (stride == 1) {
            x_in = avx512_masked_load(load_mask, ip);
        }
        else {
            x_in  = avx512_masked_gather(zeros_f, ip, vindex, load_mask);
        }

        negx_mask = _mm512_cmp_ps_mask(x_in, zeros_f, _CMP_LT_OQ);
        zero_mask = _mm512_cmp_ps_mask(x_in, zeros_f, _CMP_EQ_OQ);
        inf_mask = _mm512_cmp_ps_mask(x_in, inf, _CMP_EQ_OQ);
        nan_mask = _mm512_cmp_ps_mask(x_in, x_in, _CMP_NEQ_UQ);
        divide_by_zero_mask = _mm512_kor(divide_by_zero_mask,
                                        _mm512_kand(zero_mask, load_mask));
        invalid_mask = _mm512_kor(invalid_mask, negx_mask);

        __m512 x = avx512_set_masked_lanes(x_in, zeros_f, negx_mask);

        /* set x = normalized mantissa */
        exponent = avx512_get_exponent(x);
        x = avx512_get_mantissa(x);

        /* if x < sqrt(2) {exp = exp-1; x = 2*x} */
        sqrt2_mask = _mm512_cmp_ps_mask(x, _mm512_set1_ps(NPY_SQRT1_2f), _CMP_LE_OQ);
        x = avx512_blend(x, _mm512_add_ps(x,x), sqrt2_mask);
        exponent = avx512_blend(exponent,
                               _mm512_sub_ps(exponent,ones_f), sqrt2_mask);

        /* x = x - 1 */
        x = _mm512_sub_ps(x, ones_f);

        /* Polynomial approximation for log(1+x) */
        num_poly = _mm512_fmadd_ps(log_p5, x, log_p4);
        num_poly = _mm512_fmadd_ps(num_poly, x, log_p3);
        num_poly = _mm512_fmadd_ps(num_poly, x, log_p2);
        num_poly = _mm512_fmadd_ps(num_poly, x, log_p1);
        num_poly = _mm512_fmadd_ps(num_poly, x, log_p0);
        denom_poly = _mm512_fmadd_ps(log_q5, x, log_q4);
        denom_poly = _mm512_fmadd_ps(denom_poly, x, log_q3);
        denom_poly = _mm512_fmadd_ps(denom_poly, x, log_q2);
        denom_poly = _mm512_fmadd_ps(denom_poly, x, log_q1);
        denom_poly = _mm512_fmadd_ps(denom_poly, x, log_q0);
        poly = _mm512_div_ps(num_poly, denom_poly);
        poly = _mm512_fmadd_ps(exponent, loge2, poly);

        /*
         * x < 0.0f; return NAN
         * x = +/- NAN; return NAN
         * x = 0.0f; return -INF
         */
        poly = avx512_set_masked_lanes(poly, nan, _mm512_kor(negx_mask, nan_mask));
        poly = avx512_set_masked_lanes(poly, neg_inf, zero_mask);
        poly = avx512_set_masked_lanes(poly, inf, inf_mask);

        _mm512_mask_storeu_ps(op, (load_mask), poly);

        ip += num_lanes*stride;
        op += num_lanes;
        num_remaining_elements -= num_lanes;
    }

    if ((invalid_mask)) {
        npy_set_floatstatus_invalid();
    }
    if ((divide_by_zero_mask)) {
        npy_set_floatstatus_divbyzero();
    }
}
#endif


/*
 *****************************************************************************
 **                           BOOL LOOPS
 *****************************************************************************
 */

#line 1607

/*
 * convert any bit set to boolean true so vectorized and normal operations are
 * consistent, should not be required if bool is used correctly everywhere but
 * you never know
 */
#if !0
static NPY_INLINE __m128i byte_to_true(__m128i v)
{
    const __m128i zero = _mm_setzero_si128();
    const __m128i truemask = _mm_set1_epi8(1 == 1);
    /* get 0xFF for zeros */
    __m128i tmp = _mm_cmpeq_epi8(v, zero);
    /* filled with 0xFF/0x00, negate and mask to boolean true */
    return _mm_andnot_si128(tmp, truemask);
}
#endif

static void
sse2_binary_logical_or_BOOL(npy_bool * op, npy_bool * ip1, npy_bool * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(op, npy_bool, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] || ip2[i];
    LOOP_BLOCKED(npy_bool, VECTOR_SIZE_BYTES) {
        __m128i a = _mm_loadu_si128((__m128i*)&ip1[i]);
        __m128i b = _mm_loadu_si128((__m128i*)&ip2[i]);
#if 0
        const __m128i zero = _mm_setzero_si128();
        /* get 0xFF for non zeros*/
        __m128i tmp = _mm_cmpeq_epi8(a, zero);
        /* andnot -> 0x00 for zeros xFF for non zeros, & with ip2 */
        tmp = _mm_andnot_si128(tmp, b);
#else
        __m128i tmp = _mm_or_si128(a, b);
#endif

        _mm_store_si128((__m128i*)&op[i], byte_to_true(tmp));
    }
    LOOP_BLOCKED_END {
        op[i] = (ip1[i] || ip2[i]);
    }
}


static void
sse2_reduce_logical_or_BOOL(npy_bool * op, npy_bool * ip, const npy_intp n)
{
    const __m128i zero = _mm_setzero_si128();
    LOOP_BLOCK_ALIGN_VAR(ip, npy_bool, VECTOR_SIZE_BYTES) {
        *op = *op || ip[i];
        if (*op != 0) {
            return;
        }
    }
    /* unrolled once to replace a slow movmsk with a fast pmaxb */
    LOOP_BLOCKED(npy_bool, 2 * VECTOR_SIZE_BYTES) {
        __m128i v = _mm_load_si128((__m128i*)&ip[i]);
        __m128i v2 = _mm_load_si128((__m128i*)&ip[i + VECTOR_SIZE_BYTES]);
        v = _mm_cmpeq_epi8(v, zero);
        v2 = _mm_cmpeq_epi8(v2, zero);
#if 0
        if ((_mm_movemask_epi8(_mm_max_epu8(v, v2)) != 0)) {
            *op = 0;
#else
        if ((_mm_movemask_epi8(_mm_min_epu8(v, v2)) != 0xFFFF)) {
            *op = 1;
#endif
            return;
        }
    }
    LOOP_BLOCKED_END {
        *op = *op || ip[i];
        if (*op != 0) {
            return;
        }
    }
}


#line 1607

/*
 * convert any bit set to boolean true so vectorized and normal operations are
 * consistent, should not be required if bool is used correctly everywhere but
 * you never know
 */
#if !1
static NPY_INLINE __m128i byte_to_true(__m128i v)
{
    const __m128i zero = _mm_setzero_si128();
    const __m128i truemask = _mm_set1_epi8(1 == 1);
    /* get 0xFF for zeros */
    __m128i tmp = _mm_cmpeq_epi8(v, zero);
    /* filled with 0xFF/0x00, negate and mask to boolean true */
    return _mm_andnot_si128(tmp, truemask);
}
#endif

static void
sse2_binary_logical_and_BOOL(npy_bool * op, npy_bool * ip1, npy_bool * ip2, npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(op, npy_bool, VECTOR_SIZE_BYTES)
        op[i] = ip1[i] && ip2[i];
    LOOP_BLOCKED(npy_bool, VECTOR_SIZE_BYTES) {
        __m128i a = _mm_loadu_si128((__m128i*)&ip1[i]);
        __m128i b = _mm_loadu_si128((__m128i*)&ip2[i]);
#if 1
        const __m128i zero = _mm_setzero_si128();
        /* get 0xFF for non zeros*/
        __m128i tmp = _mm_cmpeq_epi8(a, zero);
        /* andnot -> 0x00 for zeros xFF for non zeros, & with ip2 */
        tmp = _mm_andnot_si128(tmp, b);
#else
        __m128i tmp = _mm_or_si128(a, b);
#endif

        _mm_store_si128((__m128i*)&op[i], byte_to_true(tmp));
    }
    LOOP_BLOCKED_END {
        op[i] = (ip1[i] && ip2[i]);
    }
}


static void
sse2_reduce_logical_and_BOOL(npy_bool * op, npy_bool * ip, const npy_intp n)
{
    const __m128i zero = _mm_setzero_si128();
    LOOP_BLOCK_ALIGN_VAR(ip, npy_bool, VECTOR_SIZE_BYTES) {
        *op = *op && ip[i];
        if (*op == 0) {
            return;
        }
    }
    /* unrolled once to replace a slow movmsk with a fast pmaxb */
    LOOP_BLOCKED(npy_bool, 2 * VECTOR_SIZE_BYTES) {
        __m128i v = _mm_load_si128((__m128i*)&ip[i]);
        __m128i v2 = _mm_load_si128((__m128i*)&ip[i + VECTOR_SIZE_BYTES]);
        v = _mm_cmpeq_epi8(v, zero);
        v2 = _mm_cmpeq_epi8(v2, zero);
#if 1
        if ((_mm_movemask_epi8(_mm_max_epu8(v, v2)) != 0)) {
            *op = 0;
#else
        if ((_mm_movemask_epi8(_mm_min_epu8(v, v2)) != 0xFFFF)) {
            *op = 1;
#endif
            return;
        }
    }
    LOOP_BLOCKED_END {
        *op = *op && ip[i];
        if (*op == 0) {
            return;
        }
    }
}



#line 1698

static void
sse2_absolute_BOOL(npy_bool * op, npy_bool * ip, const npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(op, npy_bool, VECTOR_SIZE_BYTES)
        op[i] = (ip[i] != 0);
    LOOP_BLOCKED(npy_bool, VECTOR_SIZE_BYTES) {
        __m128i a = _mm_loadu_si128((__m128i*)&ip[i]);
#if 0
        const __m128i zero = _mm_setzero_si128();
        const __m128i truemask = _mm_set1_epi8(1 == 1);
        /* equivalent to byte_to_true but can skip the negation */
        a = _mm_cmpeq_epi8(a, zero);
        a = _mm_and_si128(a, truemask);
#else
        /* abs is kind of pointless but maybe its used for byte_to_true */
        a = byte_to_true(a);
#endif
        _mm_store_si128((__m128i*)&op[i], a);
    }
    LOOP_BLOCKED_END {
        op[i] = (ip[i] != 0);
    }
}


#line 1698

static void
sse2_logical_not_BOOL(npy_bool * op, npy_bool * ip, const npy_intp n)
{
    LOOP_BLOCK_ALIGN_VAR(op, npy_bool, VECTOR_SIZE_BYTES)
        op[i] = (ip[i] == 0);
    LOOP_BLOCKED(npy_bool, VECTOR_SIZE_BYTES) {
        __m128i a = _mm_loadu_si128((__m128i*)&ip[i]);
#if 1
        const __m128i zero = _mm_setzero_si128();
        const __m128i truemask = _mm_set1_epi8(1 == 1);
        /* equivalent to byte_to_true but can skip the negation */
        a = _mm_cmpeq_epi8(a, zero);
        a = _mm_and_si128(a, truemask);
#else
        /* abs is kind of pointless but maybe its used for byte_to_true */
        a = byte_to_true(a);
#endif
        _mm_store_si128((__m128i*)&op[i], a);
    }
    LOOP_BLOCKED_END {
        op[i] = (ip[i] == 0);
    }
}



#undef VECTOR_SIZE_BYTES

#endif /* NPY_HAVE_SSE2_INTRINSICS */

#endif

